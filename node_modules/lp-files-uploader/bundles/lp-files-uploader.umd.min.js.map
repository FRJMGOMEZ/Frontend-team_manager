{"version":3,"sources":["../../../projects/lp-files-uploader/src/lib/lp-files-uploader.component.ts","../../../projects/lp-files-uploader/src/lib/lp-files-uploader.directive.ts","../../../projects/lp-files-uploader/src/lib/lp-files-uploader.module.ts"],"names":["LpFilesUploaderComponent","this","config","propagateChange","_","prototype","validate","errors","ngAfterViewInit","_this","trigger","Error","nativeElement","addEventListener","fileInput","click","fileInputController","valueChanges","pipe","skip","subscribe","control","files","value","writeValue","obj","registerOnChange","fn","registerOnTouched","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","Input","ViewChild","static","LpFilesUploaderDirective","el","validateTypes","validateSize","validateNameLength","error","Array","from","forEach","file","allowedMimeTypes","indexOf","type","invalidMimeType","notAllowedMimeTypes","maxSizeKb","size","invalidFileSize","maxNameLength","name","length","invalidNameLength","Directive","ElementRef","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","exports"],"mappings":"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","sourcesContent":["import { Component, forwardRef, ElementRef,ViewChild, Input,  AfterViewInit } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NgModel, NG_VALIDATORS, Validator } from '@angular/forms';\nimport { skip } from 'rxjs/operators';\n\n@Component({\n  selector: 'lp-files-uploader',\n  templateUrl: './lp-files-uploader.component.html',\n  styles:[],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => LpFilesUploaderComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => LpFilesUploaderComponent),\n      multi: true,\n    }\n  ]\n})\nexport class LpFilesUploaderComponent implements  ControlValueAccessor, AfterViewInit, Validator{\n  @Input() trigger:ElementRef\n  @ViewChild('fileInput',{static:true}) fileInput:ElementRef;\n  @ViewChild('fileInputCtrl',{static:true}) fileInputController:NgModel;\n   /* VALIDATION CRITERIA */\n  @Input() config: { [key: string]: any } = {}\n  errors: { [key: string]: any }\n  validate(){\n    return this.errors\n  }\n  ngAfterViewInit(){\n\n  if (this.trigger) {\n    this.trigger.nativeElement.addEventListener('click', () => {\n      this.fileInput.nativeElement.click();\n    })\n } else {\n   throw new Error('Component needs a trigger')\n }\n    this.fileInputController.valueChanges.pipe(skip(1)).subscribe(() => {\n       let errors = this.fileInputController.control.errors;\n        if(errors){\n          this.errors = errors;\n          this.propagateChange(null);\n        }else{\n          this.errors = null;\n          this.propagateChange(this.fileInput.nativeElement.files);\n        }\n        this.fileInput.nativeElement.files = null;\n        this.fileInput.nativeElement.value = null;\n    })\n  }\n\n  private propagateChange = (_: any) => {};\n  public writeValue(obj: any) {}\n  public registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n  public registerOnTouched() { }\n\n}\n\n\n\n \n\n  \n\n\n\n","import { Directive, Input,  forwardRef, ElementRef } from '@angular/core';\nimport { Validator, NG_VALIDATORS } from '@angular/forms';\n\n@Directive({\n  selector: '[lpFilesUploader]',\n  providers:[\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => LpFilesUploaderDirective),\n      multi: true,\n    }\n  ]\n})\nexport class LpFilesUploaderDirective implements  Validator  {\n\n  @Input() allowedMimeTypes: string[];\n  @Input() notAllowedMimeTypes: string[];\n  @Input() maxSizeKb: number ;\n  @Input() maxNameLength: number;\n\n  constructor(private el:ElementRef) { }\n\n  validate() {\n    let files:FileList = this.el.nativeElement.files; \n     let error = this.validateTypes(files) ? this.validateTypes(files):this.validateSize(files) ? this.validateSize(files) : this.validateNameLength(files) ? this.validateNameLength(files) : null;\n     return error;\n  }\n\n\n  validateTypes(files:FileList):any{\n    let error= null;\n     Array.from(files).forEach((file:File)=>{\n          if(this.allowedMimeTypes ){\n            if (this.allowedMimeTypes.indexOf(file.type) < 0) {\n              error = { invalidMimeType: true };\n            }  \n          }\n      });\n\n      if(this.notAllowedMimeTypes){\n        Array.from(files).forEach((file: File) => {\n          if (this.notAllowedMimeTypes.indexOf(file.type) >= 0) {\n            error = { invalidMimeType: true };\n          }\n        });\n      }\n     return error;\n  }\n\n\n  validateSize(files:FileList):any{\n    let error= null;\n    if(this.maxSizeKb){\n      Array.from(files).forEach((file: File) => {\n        let sizeInKb = file.size / 1024;\n        if (sizeInKb > this.maxSizeKb) {\n          error = { invalidFileSize: true };\n        }\n      });\n    }\n    return error;     \n  }\n\n  validateNameLength(files: FileList):any{\n      let error = null;\n      if(this.maxNameLength){\n        Array.from(files).forEach((file: File) => {\n          if (file.name.length > this.maxNameLength) {\n            error = { invalidNameLength: true };\n          }\n        });\n      }\n      return error;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LpFilesUploaderComponent } from './lp-files-uploader.component';\nimport { LpFilesUploaderDirective } from './lp-files-uploader.directive';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    LpFilesUploaderDirective,\n    LpFilesUploaderComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  exports:[\n    LpFilesUploaderDirective,\n    LpFilesUploaderComponent\n  ]\n})\nexport class LpFilesUploaderModule { }\n"]}