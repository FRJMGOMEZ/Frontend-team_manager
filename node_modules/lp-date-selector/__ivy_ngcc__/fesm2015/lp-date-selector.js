import { Component, forwardRef, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { LpDate } from 'lp-operations';
import { OwlDateTimeModule, OwlNativeDateTimeModule } from 'ng-pick-datetime';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/material/form-field';
import * as ɵngcc3 from '@angular/material/input';
import * as ɵngcc4 from '@angular/forms';
import * as ɵngcc5 from '@angular/material/datepicker';
import * as ɵngcc6 from '@angular/material/select';
import * as ɵngcc7 from '@angular/material/core';
import * as ɵngcc8 from 'ng-pick-datetime';

function LpDateSelectorComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 4);
    ɵngcc0.ɵɵelementStart(2, "mat-label");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 5, 6);
    ɵngcc0.ɵɵlistener("ngModelChange", function LpDateSelectorComponent_div_0_Template_input_ngModelChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.setDate($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "mat-datepicker-toggle", 7);
    ɵngcc0.ɵɵelement(7, "mat-datepicker", null, 8);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r4 = ɵngcc0.ɵɵreference(8);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("min", ctx_r0.minDate)("max", ctx_r0.maxDate)("disabled", ctx_r0.disabled)("ngModel", ctx_r0.selectedDate)("matDatepicker", _r4);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("for", _r4);
} }
function LpDateSelectorComponent_div_1_mat_option_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-option", 16);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const month_r10 = ctx.$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("value", ctx_r9.monthValue(month_r10));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", month_r10, " ");
} }
function LpDateSelectorComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "mat-form-field", 10);
    ɵngcc0.ɵɵelementStart(2, "mat-label");
    ɵngcc0.ɵɵtext(3, "Year");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "input", 11, 12);
    ɵngcc0.ɵɵlistener("keyup", function LpDateSelectorComponent_div_1_Template_input_keyup_4_listener() { ɵngcc0.ɵɵrestoreView(_r12); const _r7 = ɵngcc0.ɵɵreference(5); const _r8 = ɵngcc0.ɵɵreference(10); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.setDate(null, _r7.value, _r8.value); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "mat-form-field", 10);
    ɵngcc0.ɵɵelementStart(7, "mat-label");
    ɵngcc0.ɵɵtext(8, "Month");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "mat-select", 13, 14);
    ɵngcc0.ɵɵlistener("selectionChange", function LpDateSelectorComponent_div_1_Template_mat_select_selectionChange_9_listener() { ɵngcc0.ɵɵrestoreView(_r12); const _r7 = ɵngcc0.ɵɵreference(5); const _r8 = ɵngcc0.ɵɵreference(10); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.setDate(undefined, _r7.value, _r8.value); });
    ɵngcc0.ɵɵtemplate(11, LpDateSelectorComponent_div_1_mat_option_11_Template, 2, 2, "mat-option", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r7 = ɵngcc0.ɵɵreference(5);
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵproperty("disabled", ctx_r1.disabled)("min", ctx_r1.min ? ctx_r1.min.getFullYear() : null)("max", ctx_r1.max ? ctx_r1.max.getFullYear() : null)("value", ctx_r1.selectedDate ? ctx_r1.selectedDate.getFullYear().toString() : null);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("value", ctx_r1.selectedDate ? ctx_r1.selectedDate.getMonth().toString() : null)("disabled", !_r7.value || ctx_r1.disabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.monthOptions);
} }
function LpDateSelectorComponent_div_2_label_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "label", 22);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r14.label);
} }
function LpDateSelectorComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtemplate(1, LpDateSelectorComponent_div_2_label_1_Template, 2, 1, "label", 18);
    ɵngcc0.ɵɵelementStart(2, "input", 19, 20);
    ɵngcc0.ɵɵlistener("ngModelChange", function LpDateSelectorComponent_div_2_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.setDate($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "owl-date-time", null, 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r16 = ɵngcc0.ɵɵreference(5);
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.label);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("owlDateTime", _r16)("owlDateTimeTrigger", _r16)("disabled", ctx_r2.disabled)("placeholder", ctx_r2.placeholder)("min", ctx_r2.minDate)("max", ctx_r2.maxDate)("ngModel", ctx_r2.selectedDate);
} }
class LpDateSelectorComponent {
    constructor() {
        this.disabled = false;
        this.monthOptions = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
        this.propagateChange = (_) => { };
    }
    writeValue(date) {
        this.selectedDate = date;
    }
    registerOnChange(fn) { this.propagateChange = fn; }
    registerOnTouched() { }
    setDate(date, year, month) {
        if (date) {
            this.selectedDate = date;
            this.propagateChange(this.selectedDate);
        }
        else if (year.length === 4) {
            this.selectedDate = new Date(Number(year), Number(month), 1, 0, 0, 0, 0);
            this.propagateChange(this.selectedDate);
        }
    }
    monthValue(month) {
        return LpDate.monthValue(month);
    }
}
LpDateSelectorComponent.ɵfac = function LpDateSelectorComponent_Factory(t) { return new (t || LpDateSelectorComponent)(); };
LpDateSelectorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LpDateSelectorComponent, selectors: [["lp-date-selector"]], inputs: { disabled: "disabled", selectedDate: "selectedDate", dateFormat: "dateFormat", minDate: "minDate", maxDate: "maxDate", placeholder: "placeholder", label: "label" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => LpDateSelectorComponent),
                multi: true
            }
        ])], decls: 3, vars: 3, consts: [["class", "div-date", "fxLayoutAlign", "center", 4, "ngIf"], ["class", "div-date", "fxLayout.gt-xs", "row", "fxLayoutAlign", "center", "fxLayout.xs", "column", 4, "ngIf"], ["class", "div-date", "fxLayout", "column", "fxLayoutAlign", "center", 4, "ngIf"], ["fxLayoutAlign", "center", 1, "div-date"], ["fxFlex", "100", "appearance", "fill"], ["name", "date", "matInput", "", 3, "min", "max", "disabled", "ngModel", "matDatepicker", "ngModelChange"], ["daySelection", ""], ["matSuffix", "", 3, "for"], ["picker", ""], ["fxLayout.gt-xs", "row", "fxLayoutAlign", "center", "fxLayout.xs", "column", 1, "div-date"], ["fxFlex", "40", "fxLayoutAlign", "center", "appearance", "fill"], ["matInput", "", "onkeypress", "return event.charCode >= 48 && event.charCode <= 57", "placeholder", "Year", 3, "disabled", "min", "max", "value", "keyup"], ["yearSelection", ""], [3, "value", "disabled", "selectionChange"], ["monthSelection", ""], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"], ["fxLayout", "column", "fxLayoutAlign", "center", 1, "div-date"], ["for", "endDate", 4, "ngIf"], ["required", "", "matInput", "", "readonly", "", 1, "input-date", 3, "owlDateTime", "owlDateTimeTrigger", "disabled", "placeholder", "min", "max", "ngModel", "ngModelChange"], ["timeSelection", ""], ["dt2", ""], ["for", "endDate"]], template: function LpDateSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, LpDateSelectorComponent_div_0_Template, 9, 7, "div", 0);
        ɵngcc0.ɵɵtemplate(1, LpDateSelectorComponent_div_1_Template, 12, 7, "div", 1);
        ɵngcc0.ɵɵtemplate(2, LpDateSelectorComponent_div_2_Template, 6, 8, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.dateFormat === "day");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dateFormat === "month");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dateFormat === "time");
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatFormField, ɵngcc2.MatLabel, ɵngcc3.MatInput, ɵngcc4.DefaultValueAccessor, ɵngcc5.MatDatepickerInput, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, ɵngcc5.MatDatepickerToggle, ɵngcc2.MatSuffix, ɵngcc5.MatDatepicker, ɵngcc6.MatSelect, ɵngcc1.NgForOf, ɵngcc7.MatOption, ɵngcc8.OwlDateTimeInputDirective, ɵngcc4.RequiredValidator, ɵngcc8.OwlDateTimeTriggerDirective, ɵngcc8.OwlDateTimeComponent], styles: [".div-date[_ngcontent-%COMP%]{margin:5px}.div-date[_ngcontent-%COMP%]   .input-date[_ngcontent-%COMP%]{cursor:pointer}.div-date[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:200px!important}"] });
LpDateSelectorComponent.ctorParameters = () => [];
LpDateSelectorComponent.propDecorators = {
    dateFormat: [{ type: Input }],
    selectedDate: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    placeholder: [{ type: Input }],
    label: [{ type: Input }],
    disabled: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LpDateSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'lp-date-selector',
                template: "\n\n<div class=\"div-date\" fxLayoutAlign=\"center\" *ngIf=\"dateFormat === 'day'\">\n    <mat-form-field fxFlex=\"100\" appearance=\"fill\">\n        <mat-label>{{label}}</mat-label>\n        <input [min]=\"minDate\" [max]=\"maxDate\" (ngModelChange)=\"setDate($event)\" [disabled]=\"disabled\"  [ngModel]=\"selectedDate\" name=\"date\" #daySelection matInput [matDatepicker]=\"picker\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n</div>\n<div  class=\"div-date\" *ngIf=\"dateFormat === 'month'\" fxLayout.gt-xs=\"row\" fxLayoutAlign=\"center\" fxLayout.xs=\"column\">\n    <mat-form-field fxFlex=\"40\" fxLayoutAlign=\"center\" appearance=\"fill\">\n            <mat-label>Year</mat-label>\n            <input [disabled]=\"disabled\" [min]=\"min ? min.getFullYear():null\" [max]=\"max ? max.getFullYear():null\" (keyup)=\"setDate(null,yearSelection.value, monthSelection.value)\"  #yearSelection [value]=\"selectedDate ? selectedDate.getFullYear().toString() : null\"  matInput\n                onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\" placeholder=\"Year\">\n    </mat-form-field>\n    <mat-form-field fxFlex=\"40\"  fxLayoutAlign=\"center\" appearance=\"fill\">\n            <mat-label>Month</mat-label>\n            <mat-select (selectionChange)=\"setDate(undefined,yearSelection.value, monthSelection.value)\"  #monthSelection [value]=\"selectedDate ? selectedDate.getMonth().toString() : null\"\n                [disabled]=\"!yearSelection.value || disabled\">\n                <mat-option *ngFor=\"let month of monthOptions\" [value]=\"monthValue(month)\">\n                    {{month}}\n                </mat-option>\n            </mat-select>\n     </mat-form-field>\n</div>\n<div  class=\"div-date\" *ngIf=\"dateFormat === 'time'\" fxLayout=\"column\" fxLayoutAlign=\"center\">\n        <label *ngIf=\"label\" for=\"endDate\">{{label}}</label>\n             <input \n                #timeSelection \n                class=\"input-date\"\n                [owlDateTime]=\"dt2\"\n                [owlDateTimeTrigger]=\"dt2\"\n                [disabled]=\"disabled\" \n                [placeholder]=\"placeholder\" \n                (ngModelChange)=\"setDate($event)\"\n                [min]=\"minDate\" \n                [max]=\"maxDate\"\n                required \n                [ngModel]=\"selectedDate\" \n                matInput \n                readonly>\n        <owl-date-time #dt2></owl-date-time>\n</div>\n\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => LpDateSelectorComponent),
                        multi: true
                    }
                ],
                styles: [".div-date{margin:5px}.div-date .input-date{cursor:pointer}.div-date mat-form-field{width:200px!important}"]
            }]
    }], function () { return []; }, { disabled: [{
            type: Input
        }], selectedDate: [{
            type: Input
        }], dateFormat: [{
            type: Input
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], label: [{
            type: Input
        }] }); })();

class LpDateSelectorModule {
}
LpDateSelectorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LpDateSelectorModule });
LpDateSelectorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LpDateSelectorModule_Factory(t) { return new (t || LpDateSelectorModule)(); }, imports: [[
            CommonModule,
            OwlDateTimeModule,
            OwlNativeDateTimeModule,
            MatButtonModule,
            MatInputModule,
            MatSelectModule,
            MatTooltipModule,
            MatDatepickerModule,
            MatNativeDateModule,
            FormsModule,
            ReactiveFormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LpDateSelectorModule, { declarations: function () { return [LpDateSelectorComponent]; }, imports: function () { return [CommonModule,
        OwlDateTimeModule,
        OwlNativeDateTimeModule,
        MatButtonModule,
        MatInputModule,
        MatSelectModule,
        MatTooltipModule,
        MatDatepickerModule,
        MatNativeDateModule,
        FormsModule,
        ReactiveFormsModule]; }, exports: function () { return [LpDateSelectorComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LpDateSelectorModule, [{
        type: NgModule,
        args: [{
                declarations: [LpDateSelectorComponent],
                imports: [
                    CommonModule,
                    OwlDateTimeModule,
                    OwlNativeDateTimeModule,
                    MatButtonModule,
                    MatInputModule,
                    MatSelectModule,
                    MatTooltipModule,
                    MatDatepickerModule,
                    MatNativeDateModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                exports: [
                    LpDateSelectorComponent
                ]
            }]
    }], null, null); })();

/*
 * Public API Surface of lp-date-selector
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LpDateSelectorComponent, LpDateSelectorModule };

//# sourceMappingURL=lp-date-selector.js.map