(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('lp-operations'), require('ng-pick-datetime'), require('@angular/material/button'), require('@angular/material/input'), require('@angular/material/select'), require('@angular/material/tooltip'), require('@angular/material/datepicker'), require('@angular/material/core')) :
    typeof define === 'function' && define.amd ? define('lp-date-selector', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'lp-operations', 'ng-pick-datetime', '@angular/material/button', '@angular/material/input', '@angular/material/select', '@angular/material/tooltip', '@angular/material/datepicker', '@angular/material/core'], factory) :
    (global = global || self, factory(global['lp-date-selector'] = {}, global.ng.core, global.ng.common, global.ng.forms, global.lpOperations, global.ngPickDatetime, global.ng.material.button, global.ng.material.input, global.ng.material.select, global.ng.material.tooltip, global.ng.material.datepicker, global.ng.material.core));
}(this, (function (exports, core, common, forms, lpOperations, ngPickDatetime, button, input, select, tooltip, datepicker, core$1) { 'use strict';

    var LpDateSelectorComponent = /** @class */ (function () {
        function LpDateSelectorComponent() {
            this.disabled = false;
            this.monthOptions = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
            this.propagateChange = function (_) { };
        }
        LpDateSelectorComponent.prototype.writeValue = function (date) {
            this.selectedDate = date;
        };
        LpDateSelectorComponent.prototype.registerOnChange = function (fn) { this.propagateChange = fn; };
        LpDateSelectorComponent.prototype.registerOnTouched = function () { };
        LpDateSelectorComponent.prototype.setDate = function (date, year, month) {
            if (date) {
                this.selectedDate = date;
                this.propagateChange(this.selectedDate);
            }
            else if (year.length === 4) {
                this.selectedDate = new Date(Number(year), Number(month), 1, 0, 0, 0, 0);
                this.propagateChange(this.selectedDate);
            }
        };
        LpDateSelectorComponent.prototype.monthValue = function (month) {
            return lpOperations.LpDate.monthValue(month);
        };
        return LpDateSelectorComponent;
    }());
    LpDateSelectorComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'lp-date-selector',
                    template: "\n\n<div class=\"div-date\" fxLayoutAlign=\"center\" *ngIf=\"dateFormat === 'day'\">\n    <mat-form-field fxFlex=\"100\" appearance=\"fill\">\n        <mat-label>{{label}}</mat-label>\n        <input [min]=\"minDate\" [max]=\"maxDate\" (ngModelChange)=\"setDate($event)\" [disabled]=\"disabled\"  [ngModel]=\"selectedDate\" name=\"date\" #daySelection matInput [matDatepicker]=\"picker\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n</div>\n<div  class=\"div-date\" *ngIf=\"dateFormat === 'month'\" fxLayout.gt-xs=\"row\" fxLayoutAlign=\"center\" fxLayout.xs=\"column\">\n    <mat-form-field fxFlex=\"40\" fxLayoutAlign=\"center\" appearance=\"fill\">\n            <mat-label>Year</mat-label>\n            <input [disabled]=\"disabled\" [min]=\"min ? min.getFullYear():null\" [max]=\"max ? max.getFullYear():null\" (keyup)=\"setDate(null,yearSelection.value, monthSelection.value)\"  #yearSelection [value]=\"selectedDate ? selectedDate.getFullYear().toString() : null\"  matInput\n                onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\" placeholder=\"Year\">\n    </mat-form-field>\n    <mat-form-field fxFlex=\"40\"  fxLayoutAlign=\"center\" appearance=\"fill\">\n            <mat-label>Month</mat-label>\n            <mat-select (selectionChange)=\"setDate(undefined,yearSelection.value, monthSelection.value)\"  #monthSelection [value]=\"selectedDate ? selectedDate.getMonth().toString() : null\"\n                [disabled]=\"!yearSelection.value || disabled\">\n                <mat-option *ngFor=\"let month of monthOptions\" [value]=\"monthValue(month)\">\n                    {{month}}\n                </mat-option>\n            </mat-select>\n     </mat-form-field>\n</div>\n<div  class=\"div-date\" *ngIf=\"dateFormat === 'time'\" fxLayout=\"column\" fxLayoutAlign=\"center\">\n        <label *ngIf=\"label\" for=\"endDate\">{{label}}</label>\n             <input \n                #timeSelection \n                class=\"input-date\"\n                [owlDateTime]=\"dt2\"\n                [owlDateTimeTrigger]=\"dt2\"\n                [disabled]=\"disabled\" \n                [placeholder]=\"placeholder\" \n                (ngModelChange)=\"setDate($event)\"\n                [min]=\"minDate\" \n                [max]=\"maxDate\"\n                required \n                [ngModel]=\"selectedDate\" \n                matInput \n                readonly>\n        <owl-date-time #dt2></owl-date-time>\n</div>\n\n",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return LpDateSelectorComponent; }),
                            multi: true,
                        }
                    ],
                    styles: [".div-date{margin:5px}.div-date .input-date{cursor:pointer}.div-date mat-form-field{width:200px!important}"]
                },] }
    ];
    LpDateSelectorComponent.ctorParameters = function () { return []; };
    LpDateSelectorComponent.propDecorators = {
        dateFormat: [{ type: core.Input }],
        selectedDate: [{ type: core.Input }],
        minDate: [{ type: core.Input }],
        maxDate: [{ type: core.Input }],
        placeholder: [{ type: core.Input }],
        label: [{ type: core.Input }],
        disabled: [{ type: core.Input }]
    };

    var LpDateSelectorModule = /** @class */ (function () {
        function LpDateSelectorModule() {
        }
        return LpDateSelectorModule;
    }());
    LpDateSelectorModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [LpDateSelectorComponent],
                    imports: [
                        common.CommonModule,
                        ngPickDatetime.OwlDateTimeModule,
                        ngPickDatetime.OwlNativeDateTimeModule,
                        button.MatButtonModule,
                        input.MatInputModule,
                        select.MatSelectModule,
                        tooltip.MatTooltipModule,
                        datepicker.MatDatepickerModule,
                        core$1.MatNativeDateModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule
                    ],
                    exports: [
                        LpDateSelectorComponent
                    ]
                },] }
    ];

    /*
     * Public API Surface of lp-date-selector
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LpDateSelectorComponent = LpDateSelectorComponent;
    exports.LpDateSelectorModule = LpDateSelectorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=lp-date-selector.umd.js.map
