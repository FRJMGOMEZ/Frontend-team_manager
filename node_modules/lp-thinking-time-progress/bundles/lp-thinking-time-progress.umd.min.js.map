{"version":3,"sources":["../../../projects/lp-thinking-time-progress/src/lib/lp-thinking-time-progress/lp-thinking-time-progress.component.ts","../../../projects/lp-thinking-time-progress/src/lib/lp-thinking-time-progress.module.ts"],"names":["LpThinkingTimeProgressComponent","this","progress","show","velocity","diameter","end","EventEmitter","prototype","ngOnInit","ngOnChanges","changes","_this","timeSubscription","interval","subscribe","unsubscribe","emit","stopProgress","ngOnDestroy","Component","args","selector","template","Input","Output","NgModule","declarations","imports","CommonModule","MatIconModule","MatProgressSpinnerModule","exports"],"mappings":"0lBAkBE,SAAAA,IAPSC,KAAAC,SAAmB,EACnBD,KAAAE,MAAe,EACfF,KAAAG,SAAkB,EAClBH,KAAAI,SAAkB,GACjBJ,KAAAK,IAAM,IAAIC,EAAAA,oBAKpBP,EAAAQ,UAAAC,SAAA,aAGAT,EAAAQ,UAAAE,YAAA,SAAYC,GAAZ,IAAAC,EAAAX,KACKU,EAAQR,MAAQF,KAAKE,KACpBF,KAAKY,iBAAmBC,EAAAA,SAAyB,GAAhBb,KAAKG,UAAeW,WAAU,WACzDH,EAAKV,UAAY,IACnBU,EAAKV,YAELU,EAAKC,iBAAiBG,cACtBJ,EAAKV,SAAW,EAChBU,EAAKN,IAAIW,MAAK,QAIlBhB,KAAKY,kBAAmBZ,KAAKY,iBAAiBG,cAC9Cf,KAAKC,SAAW,IAGtBF,EAAAQ,UAAAU,aAAA,WACEjB,KAAKY,iBAAiBG,cACtBf,KAAKC,SAAW,EAChBD,KAAKK,IAAIW,MAAK,IAGhBjB,EAAAQ,UAAAW,YAAA,WACElB,KAAKY,kBAAkBZ,KAAKY,iBAAiBG,wCA3ChDI,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,4BACVC,SAAA,ukBAMCC,EAAAA,oBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,mBACAC,EAAAA,gBCIH,iCAbCC,EAAAA,SAAQL,KAAA,CAAC,CACRM,aAAc,CACZ3B,GAEF4B,QAAS,CACRC,EAAAA,aACAC,EAAAA,cACAC,EAAAA,0BAEDC,QAAS,CACPhC","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\nimport { Subscription, interval } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'lp-thinking-time-progress',\r\n  templateUrl: './lp-thinking-time-progress.component.html',\r\n  styleUrls: ['./lp-thinking-time-progress.component.css']\r\n})\r\nexport class LpThinkingTimeProgressComponent implements OnInit {\r\n\r\n\r\n  @Input() progress: number = 0;\r\n  @Input() show:boolean = false;\r\n  @Input() velocity:number = 5;\r\n  @Input() diameter:number = 60;\r\n  @Output() end = new EventEmitter<boolean>()\r\n  timeSubscription:Subscription;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes:SimpleChanges){\r\n    if(changes.show && this.show){\r\n        this.timeSubscription = interval(this.velocity * 30).subscribe(() => {\r\n          if (this.progress <= 100) {\r\n            this.progress++\r\n          } else {\r\n            this.timeSubscription.unsubscribe();\r\n            this.progress = 0;\r\n            this.end.emit(true);\r\n          }\r\n        })\r\n      }else{\r\n        this.timeSubscription ? this.timeSubscription.unsubscribe(): null;\r\n        this.progress = 0;\r\n      }\r\n  }\r\n  stopProgress() {\r\n    this.timeSubscription.unsubscribe();\r\n    this.progress = 0;\r\n    this.end.emit(false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.timeSubscription? this.timeSubscription.unsubscribe(): null;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { LpThinkingTimeProgressComponent } from './lp-thinking-time-progress/lp-thinking-time-progress.component';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@NgModule({\n  declarations: [\n    LpThinkingTimeProgressComponent\n  ],\n  imports: [\n   CommonModule,\n   MatIconModule,\n   MatProgressSpinnerModule\n  ],\n  exports: [\n    LpThinkingTimeProgressComponent\n  ]\n})\nexport class LpThinkingTimeProgressModule { }\n"]}