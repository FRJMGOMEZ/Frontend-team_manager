export class LpObject {
    static copyObject(object) {
        return JSON.parse(JSON.stringify(object));
    }
    static areEquals(obj1, obj2) {
        if (typeof obj1 !== typeof obj2) {
            return false;
        }
        if ((obj1 === undefined && obj2 !== undefined) ||
            (obj1 === undefined && obj1 !== undefined) ||
            (obj1 === null && obj2 !== null) ||
            (obj2 === null && obj1 !== null)) {
            return false;
        }
        if (typeof obj1 === 'object') {
            if (Array.isArray(obj1)) {
                if (!Array.isArray(obj2) || obj1.length !== obj2.length) {
                    return false;
                }
                for (let i = 0; i < obj1.length; i++) {
                    if (!this.areEquals(obj1[i], obj2[i])) {
                        return false;
                    }
                }
            }
            else {
                for (let prop in obj1) {
                    if (obj1.hasOwnProperty(prop)) {
                        if (!obj2.hasOwnProperty(prop)) {
                            return false;
                        }
                        //Endless loop fix for recursive properties
                        if (!this.areEquals(obj1[prop], obj2[prop])) {
                            return false;
                        }
                    }
                }
                for (let prop in obj2) {
                    if (obj2.hasOwnProperty(prop)) {
                        if (!obj1.hasOwnProperty(prop)) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }
        return obj1 === obj2;
    }
    static getObjectDifferences(obj1, obj2) {
        let differences = {};
        Object.keys(obj1).forEach((key1, index) => {
            Object.keys(obj2).forEach((key2) => {
                if (key1 === key2) {
                    if (typeof obj1[key1] === 'object') {
                        if (!this.areEquals(obj1[key1], obj2[key2])) {
                            differences[key2] = obj2[key2];
                        }
                    }
                    else {
                        if (obj1[key1] != obj2[key2]) {
                            differences[key2] = obj2[key2];
                        }
                    }
                }
            });
        });
        return differences;
    }
    static mergeObjects(initialObj, newObj) {
        initialObj = this.copyObject(initialObj);
        Object.keys(initialObj).forEach((iKey) => {
            Object.keys(newObj).forEach((nKey) => {
                if (iKey === nKey) {
                    initialObj[iKey] = newObj[nKey];
                }
            });
        });
        return initialObj;
    }
    static toQueryString(filters) {
        let queryString = '';
        Object.keys(filters).forEach((key) => {
            if (typeof filters[key] === 'object' && filters[key] !== null && !filters[key].length) {
                Object.keys(filters[key]).forEach((subKey) => {
                    queryString += filters[key][subKey] && filters[key][subKey] != null ? `${queryString ? '&' : '?'}${subKey}=${filters[key][subKey]}` : '';
                });
            }
            else if (filters[key] != null && Array.isArray(filters[key])) {
                queryString += `${queryString ? '&' : '?'}${key}[]=`;
                let arrayParams = '';
                filters[key].forEach((filter, i) => {
                    arrayParams += arrayParams ? `,${filter.toString()}` : `${filter.toString()}`;
                });
                queryString += `${arrayParams}`;
            }
            else {
                queryString += filters[key] && filters[key] != null ? `${queryString ? '&' : '?'}${key}=${filters[key]}` : '';
            }
        });
        return queryString;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHAtb2JqZWN0LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzLzM0Njk1L0Rlc2t0b3AvRFJBRlQvdGVhbS1tYW5hZ2VyLWZyb250ZW5kL3Byb2plY3RzL2xwLW9wZXJhdGlvbnMvc3JjLyIsInNvdXJjZXMiOlsibHAtb2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxRQUFRO0lBRVYsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFXO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBUyxFQUFFLElBQVM7UUFDeEMsSUFBSSxPQUFPLElBQUksS0FBSyxPQUFPLElBQUksRUFBRTtZQUM3QixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxTQUFTLENBQUM7WUFDMUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxTQUFTLENBQUM7WUFDMUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUM7WUFDaEMsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNsQyxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzFCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNyRCxPQUFPLEtBQUssQ0FBQztpQkFDaEI7Z0JBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FB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QyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQy9CLFdBQVcsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUE7Z0JBQ2pGLENBQUMsQ0FBQyxDQUFBO2dCQUNGLFdBQVcsSUFBSSxHQUFHLFdBQVcsRUFBRSxDQUFBO2FBQ2xDO2lCQUFNO2dCQUNILFdBQVcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO2FBQ2hIO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLFdBQVcsQ0FBQTtJQUN0QixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTHBPYmplY3Qge1xuXG4gICAgcHVibGljIHN0YXRpYyBjb3B5T2JqZWN0KG9iamVjdDogYW55KSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iamVjdCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYXJlRXF1YWxzKG9iajE6IGFueSwgb2JqMjogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqMSAhPT0gdHlwZW9mIG9iajIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG9iajEgPT09IHVuZGVmaW5lZCAmJiBvYmoyICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICAgICAgICAob2JqMSA9PT0gdW5kZWZpbmVkICYmIG9iajEgIT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICAgICAgIChvYmoxID09PSBudWxsICYmIG9iajIgIT09IG51bGwpIHx8XG4gICAgICAgICAgICAob2JqMiA9PT0gbnVsbCAmJiBvYmoxICE9PSBudWxsKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iajEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG9iajIpIHx8IG9iajEubGVuZ3RoICE9PSBvYmoyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqMS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXJlRXF1YWxzKG9iajFbaV0sIG9iajJbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHByb3AgaW4gb2JqMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqMS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmoyLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9FbmRsZXNzIGxvb3AgZml4IGZvciByZWN1cnNpdmUgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFyZUVxdWFscyhvYmoxW3Byb3BdLCBvYmoyW3Byb3BdKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHByb3AgaW4gb2JqMikge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqMi5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmoxLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajEgPT09IG9iajI7XG4gICAgfVxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0T2JqZWN0RGlmZmVyZW5jZXMob2JqMSwgb2JqMikge1xuICAgICAgICBsZXQgZGlmZmVyZW5jZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMob2JqMSkuZm9yRWFjaCgoa2V5MSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9iajIpLmZvckVhY2goKGtleTIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5MSA9PT0ga2V5Mikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iajFba2V5MV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXJlRXF1YWxzKG9iajFba2V5MV0sIG9iajJba2V5Ml0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZXNba2V5Ml0gPSBvYmoyW2tleTJdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqMVtrZXkxXSAhPSBvYmoyW2tleTJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZXNba2V5Ml0gPSBvYmoyW2tleTJdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZGlmZmVyZW5jZXNcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG1lcmdlT2JqZWN0cyhpbml0aWFsT2JqLCBuZXdPYmopIHtcbiAgICAgICAgaW5pdGlhbE9iaiA9IHRoaXMuY29weU9iamVjdChpbml0aWFsT2JqKTtcbiAgICAgICAgT2JqZWN0LmtleXMoaW5pdGlhbE9iaikuZm9yRWFjaCgoaUtleSkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMobmV3T2JqKS5mb3JFYWNoKChuS2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlLZXkgPT09IG5LZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbE9ialtpS2V5XSA9IG5ld09ialtuS2V5XVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBpbml0aWFsT2JqO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdG9RdWVyeVN0cmluZyhmaWx0ZXJzOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcXVlcnlTdHJpbmcgPSAnJ1xuICAgICAgICBPYmplY3Qua2V5cyhmaWx0ZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsdGVyc1trZXldID09PSAnb2JqZWN0JyAmJiBmaWx0ZXJzW2tleV0gIT09IG51bGwgJiYgIWZpbHRlcnNba2V5XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhmaWx0ZXJzW2tleV0pLmZvckVhY2goKHN1YktleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVN0cmluZyArPSBmaWx0ZXJzW2tleV1bc3ViS2V5XSAmJiBmaWx0ZXJzW2tleV1bc3ViS2V5XSAhPSBudWxsID8gYCR7cXVlcnlTdHJpbmcgPyAnJicgOiAnPyd9JHtzdWJLZXl9PSR7ZmlsdGVyc1trZXldW3N1YktleV19YCA6ICcnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyc1trZXldICE9IG51bGwgJiYgQXJyYXkuaXNBcnJheShmaWx0ZXJzW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgcXVlcnlTdHJpbmcgKz0gYCR7cXVlcnlTdHJpbmcgPyAnJicgOiAnPyd9JHtrZXl9W109YFxuICAgICAgICAgICAgICAgIGxldCBhcnJheVBhcmFtcyA9ICcnO1xuICAgICAgICAgICAgICAgIGZpbHRlcnNba2V5XS5mb3JFYWNoKChmaWx0ZXIsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlQYXJhbXMgKz0gYXJyYXlQYXJhbXMgPyBgLCR7ZmlsdGVyLnRvU3RyaW5nKCl9YCA6IGAke2ZpbHRlci50b1N0cmluZygpfWBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHF1ZXJ5U3RyaW5nICs9IGAke2FycmF5UGFyYW1zfWBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVlcnlTdHJpbmcgKz0gZmlsdGVyc1trZXldICYmIGZpbHRlcnNba2V5XSAhPSBudWxsID8gYCR7cXVlcnlTdHJpbmcgPyAnJicgOiAnPyd9JHtrZXl9PSR7ZmlsdGVyc1trZXldfWAgOiAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcXVlcnlTdHJpbmdcbiAgICB9XG5cbn1cbiJdfQ==