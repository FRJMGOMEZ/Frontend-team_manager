export class LpHtml {
    static formatTextToHtml(text) {
        let content = [];
        content = text.split('\n');
        let message = [];
        content.forEach((extract) => {
            if (extract === '') {
                message.push('<br>');
            }
            else {
                let extractSplitted = extract.split(' ');
                extractSplitted.forEach((piece, index) => {
                    if (piece === '') {
                        extractSplitted[index] = '&nbsp';
                    }
                });
                let p = `<p>${extractSplitted.join(' ')}</p>`;
                let pSplit = p.split('\n');
                pSplit.forEach((piece, index) => {
                    message.push(piece);
                });
            }
        });
        return message.join(' ');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHAtaHRtbC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy8zNDY5NS9EZXNrdG9wL0RSQUZUL3RlYW0tbWFuYWdlci1mcm9udGVuZC9wcm9qZWN0cy9scC1vcGVyYXRpb25zL3NyYy8iLCJzb3VyY2VzIjpbImxwLWh0bWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLE1BQU07SUFHUixNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBWTtRQUN2QyxJQUFJLE9BQU8sR0FBYSxFQUFFLENBQUM7UUFDM0IsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUN4QixJQUFJLE9BQU8sS0FBSyxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDdkI7aUJBQU07Z0JBQ0gsSUFBSSxlQUFlLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDeEMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQWEsRUFBRSxLQUFhLEVBQUUsRUFBRTtvQkFDckQsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO3dCQUNkLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUE7cUJBQ25DO2dCQUNMLENBQUMsQ0FBQyxDQUFBO2dCQUNGLElBQUksQ0FBQyxHQUFHLE1BQU0sZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO2dCQUM5QyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO29CQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUN2QixDQUFDLENBQUMsQ0FBQTthQUNMO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDNUIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIExwSHRtbCB7XG5cblxuICAgIHB1YmxpYyBzdGF0aWMgZm9ybWF0VGV4dFRvSHRtbCh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGNvbnRlbnQgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBbXTtcbiAgICAgICAgY29udGVudC5mb3JFYWNoKChleHRyYWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXh0cmFjdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnB1c2goJzxicj4nKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZXh0cmFjdFNwbGl0dGVkID0gZXh0cmFjdC5zcGxpdCgnICcpXG4gICAgICAgICAgICAgICAgZXh0cmFjdFNwbGl0dGVkLmZvckVhY2goKHBpZWNlOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBpZWNlID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdFNwbGl0dGVkW2luZGV4XSA9ICcmbmJzcCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgbGV0IHAgPSBgPHA+JHtleHRyYWN0U3BsaXR0ZWQuam9pbignICcpfTwvcD5gO1xuICAgICAgICAgICAgICAgIGxldCBwU3BsaXQgPSBwLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICBwU3BsaXQuZm9yRWFjaCgocGllY2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHVzaChwaWVjZSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gbWVzc2FnZS5qb2luKCcgJylcbiAgICB9XG59XG4iXX0=