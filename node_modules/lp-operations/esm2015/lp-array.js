export class LpArray {
    static divideArray(array, size) {
        const chunked_arr = [];
        for (let i = 0; i < array.length; i++) {
            const last = chunked_arr[chunked_arr.length - 1];
            if (!last || last.length === size) {
                chunked_arr.push([array[i]]);
            }
            else {
                last.push(array[i]);
            }
        }
        return chunked_arr;
    }
    static update(oldArray, item, method) {
        let updated;
        switch (method) {
            case 'POST':
                updated = [...oldArray, item];
                break;
            case 'PUT':
                updated = oldArray.map((eachItem) => { return eachItem._id === item._id ? item : eachItem; });
                break;
            case 'DELETE':
                updated = oldArray.filter((eachItem) => { return eachItem._id != item._id; });
                break;
        }
        return updated;
    }
    static hasItem(array, item) {
        if (array.map((eachItem) => { return eachItem._id; }).includes(item._id)) {
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHAtYXJyYXkuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvMzQ2OTUvRGVza3RvcC9EUkFGVC90ZWFtLW1hbmFnZXItZnJvbnRlbmQvcHJvamVjdHMvbHAtb3BlcmF0aW9ucy9zcmMvIiwic291cmNlcyI6WyJscC1hcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sT0FBTztJQUNULE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBWSxFQUFFLElBQVk7UUFDaEQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLEVBQUU7Z0JBQy9CLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2hDO2lCQUFNO2dCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdkI7U0FDSjtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7SUFDTSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBYztRQUMvQyxJQUFJLE9BQU8sQ0FBQTtRQUNYLFFBQVEsTUFBTSxFQUFFO1lBQ1osS0FBSyxNQUFNO2dCQUNQLE9BQU8sR0FBRyxDQUFDLEdBQUcsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUM5QixNQUFNO1lBQ1YsS0FBSyxLQUFLO2dCQUNOLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxPQUFPLFFBQVEsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDNUYsTUFBTTtZQUNWLEtBQUssUUFBUTtnQkFDVCxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsT0FBTyxRQUFRLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDNUUsTUFBTTtTQUNiO1FBQ0QsT0FBTyxPQUFPLENBQUE7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUk7UUFDN0IsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3JFLE9BQU8sSUFBSSxDQUFBO1NBQ2Q7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTHBBcnJheSB7XG4gICAgcHVibGljIHN0YXRpYyBkaXZpZGVBcnJheShhcnJheTogYW55W10sIHNpemU6IG51bWJlcikge1xuICAgICAgICBjb25zdCBjaHVua2VkX2FyciA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0ID0gY2h1bmtlZF9hcnJbY2h1bmtlZF9hcnIubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoIWxhc3QgfHwgbGFzdC5sZW5ndGggPT09IHNpemUpIHtcbiAgICAgICAgICAgICAgICBjaHVua2VkX2Fyci5wdXNoKFthcnJheVtpXV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYXN0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaHVua2VkX2FycjtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyB1cGRhdGUob2xkQXJyYXksIGl0ZW0sIG1ldGhvZDogc3RyaW5nKSB7XG4gICAgICAgIGxldCB1cGRhdGVkXG4gICAgICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICAgICAgICBjYXNlICdQT1NUJzpcbiAgICAgICAgICAgICAgICB1cGRhdGVkID0gWy4uLm9sZEFycmF5LCBpdGVtXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1BVVCc6XG4gICAgICAgICAgICAgICAgdXBkYXRlZCA9IG9sZEFycmF5Lm1hcCgoZWFjaEl0ZW0pID0+IHsgcmV0dXJuIGVhY2hJdGVtLl9pZCA9PT0gaXRlbS5faWQgPyBpdGVtIDogZWFjaEl0ZW0gfSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0RFTEVURSc6XG4gICAgICAgICAgICAgICAgdXBkYXRlZCA9IG9sZEFycmF5LmZpbHRlcigoZWFjaEl0ZW0pID0+IHsgcmV0dXJuIGVhY2hJdGVtLl9pZCAhPSBpdGVtLl9pZCB9KVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cGRhdGVkXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBoYXNJdGVtKGFycmF5LCBpdGVtKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChhcnJheS5tYXAoKGVhY2hJdGVtKSA9PiB7IHJldHVybiBlYWNoSXRlbS5faWQgfSkuaW5jbHVkZXMoaXRlbS5faWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbn1cbiJdfQ==