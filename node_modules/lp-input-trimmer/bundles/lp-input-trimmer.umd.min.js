!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@angular/core"),require("@angular/forms")):"function"==typeof define&&define.amd?define("lp-input-trimmer",["exports","@angular/core","@angular/forms"],r):r((e=e||self)["lp-input-trimmer"]={},e.ng.core,e.ng.forms)}(this,(function(e,r,t){"use strict";var n=function(){function e(e,r){this.el=e,this.renderer=r,this.propagateChange=function(e){}}return e.prototype.onChange=function(e){this.propagateChange(e.trim())},e.prototype.writeValue=function(e){var r=null==e?"":e;this.renderer.setProperty(this.el.nativeElement,"value",r)},e.prototype.registerOnChange=function(e){this.propagateChange=e},e.prototype.registerOnTouched=function(){},e}();n.decorators=[{type:r.Directive,args:[{selector:"[lpInputTrimmer]",providers:[{provide:t.NG_VALUE_ACCESSOR,useExisting:r.forwardRef((function(){return n})),multi:!0}]}]}],n.ctorParameters=function(){return[{type:r.ElementRef},{type:r.Renderer2}]},n.propDecorators={onChange:[{type:r.HostListener,args:["input",["$event.target.value"]]}]};var o=function(){};o.decorators=[{type:r.NgModule,args:[{declarations:[n],imports:[],exports:[n]}]}],e.LpInputTrimmerDirective=n,e.LpInputTrimmerModule=o,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=lp-input-trimmer.umd.min.js.map