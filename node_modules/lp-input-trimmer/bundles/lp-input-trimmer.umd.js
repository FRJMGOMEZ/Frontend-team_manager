(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('lp-input-trimmer', ['exports', '@angular/core', '@angular/forms'], factory) :
    (global = global || self, factory(global['lp-input-trimmer'] = {}, global.ng.core, global.ng.forms));
}(this, (function (exports, core, forms) { 'use strict';

    var LpInputTrimmerDirective = /** @class */ (function () {
        function LpInputTrimmerDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.propagateChange = function (_) { };
        }
        LpInputTrimmerDirective.prototype.onChange = function (value) {
            this.propagateChange(value.trim());
        };
        LpInputTrimmerDirective.prototype.writeValue = function (val) {
            var value = val == null ? '' : val;
            this.renderer.setProperty(this.el.nativeElement, 'value', value);
        };
        LpInputTrimmerDirective.prototype.registerOnChange = function (fn) {
            this.propagateChange = fn;
        };
        LpInputTrimmerDirective.prototype.registerOnTouched = function () { };
        return LpInputTrimmerDirective;
    }());
    LpInputTrimmerDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[lpInputTrimmer]',
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return LpInputTrimmerDirective; }),
                            multi: true
                        }]
                },] }
    ];
    LpInputTrimmerDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    LpInputTrimmerDirective.propDecorators = {
        onChange: [{ type: core.HostListener, args: ['input', ['$event.target.value'],] }]
    };

    var LpInputTrimmerModule = /** @class */ (function () {
        function LpInputTrimmerModule() {
        }
        return LpInputTrimmerModule;
    }());
    LpInputTrimmerModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [LpInputTrimmerDirective],
                    imports: [],
                    exports: [LpInputTrimmerDirective]
                },] }
    ];

    /*
     * Public API Surface of lp-input-trimmer
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LpInputTrimmerDirective = LpInputTrimmerDirective;
    exports.LpInputTrimmerModule = LpInputTrimmerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=lp-input-trimmer.umd.js.map
