import { Directive, forwardRef, ElementRef, Renderer2, HostListener, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

class LpInputTrimmerDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.propagateChange = (_) => { };
    }
    onChange(value) {
        this.propagateChange(value.trim());
    }
    writeValue(val) {
        const value = val == null ? '' : val;
        this.renderer.setProperty(this.el.nativeElement, 'value', value);
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched() { }
}
LpInputTrimmerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lpInputTrimmer]',
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => LpInputTrimmerDirective),
                        multi: true
                    }]
            },] }
];
LpInputTrimmerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
LpInputTrimmerDirective.propDecorators = {
    onChange: [{ type: HostListener, args: ['input', ['$event.target.value'],] }]
};

class LpInputTrimmerModule {
}
LpInputTrimmerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LpInputTrimmerDirective],
                imports: [],
                exports: [LpInputTrimmerDirective]
            },] }
];

/*
 * Public API Surface of lp-input-trimmer
 */

/**
 * Generated bundle index. Do not edit.
 */

export { LpInputTrimmerDirective, LpInputTrimmerModule };
//# sourceMappingURL=lp-input-trimmer.js.map
