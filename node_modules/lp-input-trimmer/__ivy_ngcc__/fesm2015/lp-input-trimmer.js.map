{"version":3,"file":"lp-input-trimmer.js","sources":["../../../projects/lp-input-trimmer/src/lib/lp-input-trimmer.directive.ts","../../../projects/lp-input-trimmer/src/lib/lp-input-trimmer.module.ts","../../../projects/lp-input-trimmer/src/public-api.ts","../../../projects/lp-input-trimmer/src/lp-input-trimmer.ts"],"names":[],"mappings":";;;;MAWa,uBAAuB;AAAG,IACrC,YAAoB,EAAc,EAAU,QAAmB;AAAI,QAA/C,OAAE,GAAF,EAAE,CAAY;AAAC,QAAS,aAAQ,GAAR,QAAQ,CAAW;AAAC,QAIxD,oBAAe,GAAG,CAAC,CAAM,QAAQ,CAAC;AAC5C,KALsE;AACtE,IAAkD,QAAQ,CAAC,KAAa;AACxE,QAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;AACtC,KAAG;AACH,IACS,UAAU,CAAC,GAAQ;AAC5B,QAAI,MAAM,KAAK,GAAG,GAAG,IAAI,IAAI,GAAG,EAAE,GAAG,GAAG,CAAC;AACzC,QAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AACrE,KAAG;AACH,IAAS,gBAAgB,CAAC,EAAO;AACjC,QAAI,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;AAC9B,KAAG;AACH,IAAS,iBAAiB,MAAM;AAChC;mDAtBC,SAAS,SAAC,kBACT,QAAQ,EAAE,kBAAkB,kBAC5B,SAAS,EAAE,CAAC,0BACV,OAAO,EAAE,iBAAiB;WAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,uBAAuB,CAAC,0BACtD,KAAK,EAAE,IAAI,sBACZ,CAAC,cACH;;;;;;oBACI;AAAC;AAAiD,YAXT,UAAU;AAAI,YAAF,SAAS;AAAG;AAAG;AACjD,uBAYrB,YAAY,SAAC,OAAO,EAAE,CAAC,qBAAqB,CAAC;AAAM;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCJ7C,oBAAoB;AAAG;gDANnC,QAAQ,SAAC,kBACR;UAAY,EAAE,CAAC,uBAAuB,CAAC,kBACvC,OAAO,EAAE,EACR,kBACD,OAAO,EAAE,CAAC,uBAAuB,CAAC,cACnC;;;;;;;;;0BACI;AAAC;ACTN;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AAC4B","sourcesContent":["import { Directive, forwardRef, HostListener, ElementRef, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  selector: '[lpInputTrimmer]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => LpInputTrimmerDirective),\n    multi: true\n  }]\n})\nexport class LpInputTrimmerDirective implements ControlValueAccessor {\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\n  @HostListener('input', ['$event.target.value']) onChange(value: string) {\n    this.propagateChange(value.trim())\n  }\n  private propagateChange = (_: any) => { };\n  public writeValue(val: any) {\n    const value = val == null ? '' : val;\n    this.renderer.setProperty(this.el.nativeElement, 'value', value);\n  }\n  public registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n  public registerOnTouched() { }\n\n}\n","import { NgModule } from '@angular/core';\nimport { LpInputTrimmerDirective } from './lp-input-trimmer.directive';\n\n@NgModule({\n  declarations: [LpInputTrimmerDirective],\n  imports: [\n  ],\n  exports: [LpInputTrimmerDirective]\n})\nexport class LpInputTrimmerModule { }\n","/*\n * Public API Surface of lp-input-trimmer\n */\n\nexport * from './lib/lp-input-trimmer.directive';\nexport * from './lib/lp-input-trimmer.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}