{"version":3,"sources":["./src/app/auth/auth.module.ts","./src/app/auth/login/login-smart.component.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/recovering/forgot/forgot-smart.component.ts","./src/app/auth/recovering/forgot/forgot.component.ts","./src/app/auth/recovering/forgot/forgot.component.html","./src/app/auth/recovering/reset/reset-smart.component.ts","./src/app/auth/recovering/reset/reset.component.ts","./src/app/auth/recovering/reset/reset.component.html","./src/app/auth/registration/registration-smart.component.ts","./src/app/auth/registration/registration.component.ts","./src/app/auth/registration/registration.component.html","./src/app/auth/shared/directives/password-validator.directive.ts","./src/app/auth/shared/models/credentials.ts","./src/app/auth/shared/providers/auth-dialog.service.ts","./src/app/shared/models/user.model.ts","./src/app/validations.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PasswordDirective } from './shared/directives/password-validator.directive';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LoginSmartComponent } from './login/login-smart.component';\nimport { RegistrationSmartComponent } from './registration/registration-smart.component';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ForgotSmartComponent } from './recovering/forgot/forgot-smart.component';\nimport { ResetComponent } from './recovering/reset/reset.component';\nimport { ForgotComponent } from './recovering/forgot/forgot.component';\nimport { ResetSmartComponent } from './recovering/reset/reset-smart.component';\nimport { PipesModule } from '../shared/pipes/pipes.module';\nimport { MaterialModule } from '../shared/material/material.module';\n\n\nlet authRoutes:Routes=[\n  {\n    path: '',\n    redirectTo: 'login',\n    pathMatch: 'full'\n  },\n  {\n    path: 'login', component: LoginSmartComponent,\n  }, \n  {\n    path:'registration', component:RegistrationSmartComponent\n  }\n]\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    LoginSmartComponent,\n    PasswordDirective,\n    RegistrationSmartComponent,\n    RegistrationComponent,\n    ResetComponent,\n    ForgotComponent,\n    ForgotSmartComponent,\n    ResetSmartComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(authRoutes),\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    PipesModule,\n    MaterialModule\n  ]\n/*   entryComponents: [ForgotSmartComponent] */\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../shared/providers/auth.service';\r\nimport { Credentials } from '../shared/models/credentials';\r\n\r\n\r\n@Component({\r\n  selector: \"app-login-smart\",\r\n  template:`\r\n   <app-login (login)=\"login($event)\" (toRegistration)=\"navigateToRegistration()\" > </app-login>`\r\n})\r\nexport class LoginSmartComponent implements OnInit {\r\n  \r\n  email: string;\r\n  rememberMe: boolean = false;\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private ar:ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n     if(this.authService.userOnline){\r\n          this.authService.cleanStorage()\r\n    } \r\n  }\r\n login(data:{credentials:Credentials,rememberMe:boolean}) {\r\n  this.authService.login(data.credentials, data.rememberMe).subscribe((res:any) => {\r\n      this.router.navigate([\"\"]);\r\n    });\r\n  }\r\n  navigateToRegistration(){\r\n      this.router.navigate(['registration'],{relativeTo:this.ar.parent})\r\n  }\r\n}\r\n ","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport {Credentials} from '../shared/models/credentials';\nimport { AuthDialogService } from '../shared/providers/auth-dialog.service';\nimport { LocalStorageService } from 'src/app/library/providers/local-storage.service';\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.scss\"]\n})\nexport class LoginComponent implements OnInit {\n  @Output() login: EventEmitter<{ credentials: Credentials, rememberMe: boolean }> = new EventEmitter<{ credentials: Credentials, rememberMe: boolean }>();\n\n  @Output() toRegistration:EventEmitter<void> = new EventEmitter<void>();\n\n  @Output() openInfo:EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  email: string;\n  password:string;\n  rememberMe: boolean\n  regExpValidations:{error:string,regExp:string}[]=[\n    { error: 'hasNumeric', regExp:'(?=.*[0-9])'},\n    { error: 'minLength', regExp:'(?=.{8,})'}\n  ]\n\n  constructor( private localStorageService:LocalStorageService, private dialogService:AuthDialogService){}\n\n  ngOnInit() {\n    this.checkRememberMe();\n  }\n checkRememberMe(){\n    this.email = this.localStorageService.get('rememberMe') || \"\";\n    this.email ? this.rememberMe = true : this.rememberMe = false;\n  }\n doLogin() {\n    let credentials = new Credentials(this.email,this.password);\n    this.login.emit({credentials,rememberMe:this.rememberMe})\n  }\n  navigateToRegistration(){\n     this.toRegistration.emit();\n  }\n  recoverPassword(){\n    this.dialogService.openRecoverPassDialog()\n  }\n  showInfo(param:boolean){\n    this.openInfo.emit(param)\n  }\n}\n\n","<div class=\"container-fluid\">\n    <img class=\"img-background\" [src]=\"'team-manager.jpg' | frontImg\" alt=\"\">\n    <div class=\"login-container\">\n        <div fxLayout=\"column\">\n            <h2 fxLayoutAlign=\"center\" [style.font-weight]=\"'bolder'\">\n                TEAM MANAGER\n            </h2>\n            <hr>\n            <h3 fxLayoutAlign=\"center\" [style.font-weight]=\"'bolder'\">LOGIN</h3>\n            <form ngNativeValidate #userForm='ngForm' role=\"form\" (ngSubmit)='doLogin()'>\n                    <div  fxLayoutAlign=\"center\">\n                         <mat-form-field  >\n                              <mat-label for=\"email\">EMAIL</mat-label>\n                             <input matInput #emailControl=\"ngModel\" [(ngModel)]=\"email\" id=\"email\" name='email' type=\"email\"  placeholder=\"E-mail\"   autofocus=\"\" email required>\n                         </mat-form-field>\n                    </div>\n                    <ng-container  *ngIf=\"!emailControl.valid && emailControl.touched\">\n                                        <p   *ngIf=\"emailControl.errors.email && !emailControl.errors.required\" class=\"error-message\">El valor de este campo debe ser un email válido</p>\n                    </ng-container>\n                    <div [style.margin-top]=\"'2.5em'\" fxLayoutAlign=\"center\"> \n                          <mat-form-field>\n                            <mat-label for=\"password\">PASSWORD</mat-label>\n                             <input appPassword  matInput [(ngModel)]=\"password\"  #passControl=\"ngModel\" [regExps]=\"regExpValidations\"  id=\"password\" name=\"password\"  type=\"password\"  placeholder=\"Password\" required>\n                          </mat-form-field>\n                    </div>\n                     <ng-container *ngIf=\"!passControl.valid && passControl.touched\">\n                                        <p *ngIf=\"passControl.errors.hasNumeric && !passControl.errors.required \" class=\"error-message\">La contraseña debe de tener al menos un número</p>\n                                        <p *ngIf=\"passControl.errors.minLength && !passControl.errors.required && !passControl.errors.hasNumeric\" class=\"error-message\">La contraseña debe ser al menos de 8 caracteres</p>\n                    </ng-container>\n                    <div [style.margin-top]=\"'2em'\" fxLayoutAlign=\"center\">\n                              <mat-checkbox  class=\"remember-me\" [(ngModel)]=\"rememberMe\" value=\"false\"  name=\"rememberMe\" type=\"checkbox\" >Remember me</mat-checkbox> \n                    </div>\n                <div class=\"btn-submit\" fxLayoutAlign=\"center\" >\n                     <button mat-raised-button [disabled]=\"userForm.invalid\" type='submit'><strong>LOGIN</strong></button>\n                </div>\n            </form>\n            <div  [style.margin-top]=\"'1.5em'\" fxLayout=\"row\"  fxLayoutAlign=\"space-around\">\n                <a (click)=\"navigateToRegistration()\" >Registrarse</a>\n                <a (click)=\"recoverPassword()\" routerLinkActive=\"router-link-active\">¿Olvidaste tu contraseña?</a>\n            </div>\n        </div>\n    </div>\n</div>\n\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../shared/providers/auth.service';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n    selector: 'app-forgot-smart',\r\n    template:`\r\n  \r\n    <app-forgot (recoverPass)=\"recoverPass($event)\" (doHide)=\"hide()\"> </app-forgot>\r\n                   `\r\n               \r\n})\r\nexport class ForgotSmartComponent  {\r\n\r\n    constructor(private authService: AuthService,private dialogRef: MatDialogRef<ForgotSmartComponent>, @Inject(MAT_DIALOG_DATA) data) { }\r\n\r\n    hide() { \r\n        this.dialogRef.close()\r\n    }\r\n\r\n    recoverPass(email:string){\r\n        this.authService.forgotPassword(email).subscribe(()=>{\r\n            this.dialogRef.close(email)\r\n        })\r\n    }\r\n}","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n\n  email:string\n\n  @Output() recoverPass:EventEmitter<string> = new EventEmitter<string>()\n\n  @Output() doHide:EventEmitter<void> = new EventEmitter<void>();\n\n  constructor() { }\n\n  ngOnInit() {\n    \n  }\n\n  hideModal(){\n    this.doHide.emit()\n  }\n\n  forgotRequest(){\n     this.recoverPass.emit(this.email)\n  }\n}","\n <h2 mat-dialog-title>RESET YOUR PASSWORD</h2>\n\n<mat-dialog-content>\n     <form action=\"\" ngNativeValidate #forgotForm='ngForm' role=\"form\" (ngSubmit)=\"forgotRequest()\">\n                        <div class=\"form-group\">\n                            <input #emailControl=\"ngModel\" [(ngModel)]=\"email\" name='email' class=\"form-control\" placeholder=\"Introduce tu email\" name=\"email\" type=\"email\" required email>\n                            <ng-container *ngIf=\"emailControl.invalid && emailControl.touched\" >\n                                <p *ngIf=\"emailControl.errors.required\" class=\"error-message\">Este campo es obligatorio</p>\n                                 <p *ngIf=\"emailControl.errors.email && !emailControl.errors.required\" class=\"error-message\">El valor del campo debe ser un email válido</p>\n                            </ng-container>\n                        </div>\n                        <br>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n     <button class=\"mat-raised-button\" (click)=\"forgotRequest()\" cdkFocusInitial [disabled]=\"forgotForm.invalid\" type='submit'> <strong>Send</strong>    </button>\n     <button class=\"mat-raised-button\"(click)=\"hideModal()\">Close</button>\n</mat-dialog-actions>\n\n\n          \n","import { Component, Inject } from '@angular/core';\r\nimport { AuthService } from '../../shared/providers/auth.service';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: 'app-reset-smart',\r\n    template: `\r\n    \r\n            <app-reset (hide)=\"hideModal()\" (reset)=\"changePassword($event)\"> </app-reset>\r\n         \r\n    `\r\n})\r\nexport class ResetSmartComponent {\r\n\r\n    email: string\r\n\r\n    constructor(  private authService: AuthService,  private dialogRef: MatDialogRef<ResetSmartComponent>, @Inject(MAT_DIALOG_DATA) private data:any) {}\r\n    ngOnInit() {\r\n        this.email = this.data.email;\r\n    }\r\n\r\n    changePassword({ password, resetCode }) {\r\n        this.authService.setNewPassword(resetCode, password, this.email).subscribe(() => {\r\n            this.dialogRef.close();\r\n        })\r\n    }\r\n\r\n    hideModal() {\r\n        this.dialogRef.close()\r\n    }\r\n}\r\n","import { Component, Output, EventEmitter, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder, Validator } from '@angular/forms';\nimport { areTheyEqual, checkRegExp } from '../../../validations';\nimport { of } from 'rxjs';\n\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.scss']\n})\nexport class ResetComponent implements OnInit  {\n  regExpValidations: { error: string, regExp: string }[] = [\n    { error: 'hasNumeric', regExp: '(?=.*[0-9])' },\n    { error: 'minLength', regExp: '(?=.{8,})' }\n  ]\n  @Output() reset: EventEmitter<{ password: string,resetCode:string}> = new EventEmitter < { password: string,resetCode:string }>()\n\n  @Output() hide:EventEmitter<void> = new EventEmitter<void>();\n      \n  resetForm: FormGroup = this.fb.group({\n    resetCode: [ '', [Validators.required,Validators.minLength(10)]],\n    password1: [{ value: '', disabled:true}, [Validators.required,checkRegExp(this.regExpValidations)]],\n    password2: [{ value: '', disabled:true }, [Validators.required,checkRegExp( this.regExpValidations)]],\n  },{ validators: areTheyEqual('password1', 'password2') })\n\n  get passwordsDisabled() {\n    return this.resetForm ? this.resetForm.controls.resetCode.errors ? true : false : false;\n  }\n\n  ngOnInit(){\n    this.resetForm.controls.resetCode.valueChanges.subscribe((value)=>{\n      \n      console.log(this.resetForm)\n      if(this.resetForm.controls.resetCode.errors){\n          this.resetForm.controls.password1.disable();\n        this.resetForm.controls.password2.disable();\n      }else{\n        this.resetForm.controls.password1.enable();\n        this.resetForm.controls.password2.enable();\n      }\n    })\n  }\n\n  constructor(private fb:FormBuilder) {}\n\n  hideModal(){\n    this.hide.emit()\n  }\n\n  displayPasswordError(resetForm: FormGroup) {\n     if (resetForm.invalid && resetForm.touched && resetForm.controls.password1.value.length && resetForm.controls.password2.value.length && resetForm.errors) {\n       if (resetForm.errors.areTheyEqual) {\n         return true;\n       } else {\n         return false\n       }\n     } else {\n       return false\n     }\n  }\n\n  changePass(){\n     this.reset.emit({password:this.resetForm.value.password2,resetCode:this.resetForm.value.resetCode});\n  }\n\n  changesInCode(form){\n    console.log({form})\n  }\n}\n","\n\n<h2 mat-dialog-title>RESTORE YOUR PASSWORD</h2>\n\n<mat-dialog-content [style.margin-bottom]=\"'2em'\" >\n        <form ngNativeValidate [formGroup]='resetForm' id=\"loginform\">\n                            \n                                        <div  fxLayoutAlign=\"center\">\n                                             <mat-form-field fxLayoutAlign=\"center\">\n                                             <input  matInput formControlName=\"resetCode\" name='resetCode' placeholder=\"Type your reset code\" type=\"text\">\n                                             </mat-form-field>\n                                        </div>\n                                          <div fxLayoutAlign=\"center\" *ngIf=\"resetForm.controls.resetCode.errors && resetForm.controls.resetCode.touched\" >\n                                                 <small *ngIf=\"resetForm.controls.resetCode.errors.minlength && !resetForm.controls.resetCode.errors.required \" class=\"error-message\">min teen characters</small>\n                                          </div>\n\n                                         <div [style.margin-top]=\"'2em'\" >\n                                             <div fxLayoutAlign=\"center\">\n                                                 <mat-form-field>\n                                                    <input  matInput  formControlName='password1' name='password1' placeholder=\"Password1\" type=\"password\">\n                                                </mat-form-field>\n                                             </div>\n                                            <div fxLayoutAlign=\"center\" *ngIf=\"!resetForm.controls.password1.valid && resetForm.controls.password1.touched\">\n                                                <small *ngIf=\"resetForm.controls.password1.errors.hasNumeric && !resetForm.controls.password1.errors.required \" class=\"error-message\">min one number</small>\n                                                <small *ngIf=\"resetForm.controls.password1.errors.minLength && !resetForm.controls.password1.errors.required && !resetForm.controls.password1.errors.hasNumeric\" class=\"error-message\"> min eight characters</small>\n                                            </div>\n        \n                                            <div fxLayoutAlign=\"center\" [style.margin-top]=\"'2em'\" >\n                                                <mat-form-field>\n                                                        <input   matInput  formControlName='password2' name='password2' class=\"form-control\" placeholder=\"Password2\" type=\"password\" >\n                                                </mat-form-field>\n                                            </div>\n                                            <div fxLayoutAlign=\"center\"  *ngIf=\"!resetForm.controls.password2.valid && resetForm.controls.password2.touched\">\n                                                <small *ngIf=\"resetForm.controls.password2.errors.hasNumeric && !resetForm.controls.password2.errors.required \" class=\"error-message\">one number is required</small>\n                                                <small *ngIf=\"resetForm.controls.password2.errors.minLength && !resetForm.controls.password2.errors.required && !resetForm.controls.password2.errors.hasNumeric\" class=\"error-message\">min eight characters</small>\n                                            </div>\n                                         </div>\n                                            \n                                        <div fxLayoutAlign=\"center\" [style.margin-top]=\"'2em'\" >\n                                            <small  *ngIf=\"displayPasswordError(resetForm)\" class='error-message'>The both passwords must be equal</small>\n                                        </div>\n\n                    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n      <button class=\"mat-raised-button\" (click)=\"changePass()\"  [disabled]=\"resetForm.invalid\"> <strong>Restablecer contraseña</strong></button>\n      <button class=\"mat-raised-button\"(click)=\"hideModal()\">Close</button> \n</mat-dialog-actions>\n\n\n          \n\n    \n\n\n       \n   ","import { Component } from '@angular/core';\r\nimport { UserServices } from '../../shared/providers/user.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { User } from '../../shared/models/user.model';\r\n\r\n@Component({\r\n    selector: 'app-registration-smart',\r\n    template:`\r\n    <app-registration  (toLogin)=\"navigateToLogin()\" (registration)=\"registration($event)\" > </app-registration>\r\n    `\r\n})\r\nexport class RegistrationSmartComponent {\r\n\r\n    constructor(private userService:UserServices, private router:Router, private ar:ActivatedRoute){}\r\n\r\n    registration(user: User) {\r\n        this.userService.postUser(user).subscribe(()=>{\r\n            this.router.navigate( ['login'], {relativeTo: this.ar.parent})\r\n        })\r\n    }   \r\n\r\n    navigateToLogin(){\r\n        this.router.navigate(['login'], { relativeTo: this.ar.parent }) \r\n    }\r\n\r\n}\r\n\r\n"," import { Component, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { areTheyEqual, checkRegExp } from '../../validations';\nimport { User } from '../../shared/models/user.model';\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: [\"./registration.component.scss\"]\n})\nexport class RegistrationComponent {\n\n  regExpValidations: { error: string, regExp: string }[] = [\n    { error: 'hasNumeric', regExp: '(?=.*[0-9])' },\n    { error: 'minLength', regExp: '(?=.{8,})' }\n  ]\n  @Output() toLogin:EventEmitter<void> = new EventEmitter<void>();\n\n  @Output() registration:EventEmitter<User> = new EventEmitter<User>();\n\n  userForm: FormGroup = this.fb.group({\n    name: ['', [Validators.required, Validators.minLength(5)]],\n    email: ['', [Validators.required, Validators.email]],\n    password1: ['', [Validators.required, checkRegExp(this.regExpValidations)]],\n    password2: ['', [Validators.required, checkRegExp(this.regExpValidations)]]\n  }, { validators: areTheyEqual('password1', 'password2') })\n\n  constructor(private fb: FormBuilder) {}\n  \n  navigateToLogin(){\n     this.toLogin.emit();\n   }\n\n   doRegistration(){\n    let user = new User(this.userForm.value.name,this.userForm.value.email,this.userForm.value.password2);\n    this.registration.emit(user);\n   }\n\n   displayPasswordError(userForm:FormGroup){\n     if (userForm.invalid && userForm.touched && userForm.value.password1.length && userForm.value.password2.length && userForm.errors){\n          if(userForm.errors.areTheyEqual){\n            return true;\n          }else{\n            return false\n          }\n     }else{\n      return false\n     }\n   }\n}\n\n","\n<div class=\"container-fluid\">\n     <img class=\"img-background\" [src]=\"'team-manager.jpg' | frontImg\" alt=\"\">\n      <div class=\"register-container\">\n          <div fxLayout=\"column\">\n              <h2 fxLayoutAlign=\"center\" [style.font-weight]=\"'bolder'\">\n                TEAM MANAGER\n            </h2>\n            <hr>\n            <h3 fxLayoutAlign=\"center\" [style.font-weight]=\"'bolder'\">REGISTRATION</h3>\n            <form ngNativeValidate  [formGroup]='userForm' id=\"loginform\" (ngSubmit)='doRegistration()'>\n                  <div fxLayoutAlign=\"center\">\n                    <mat-form-field>\n                      <mat-label for=\"name\">NAME</mat-label>\n                     <input matInput formControlName='name' id=\"name\" name='name' placeholder=\"NAME\" type=\"text\" autofocus=\"\" >\n                      </mat-form-field>\n                  </div>\n                  <ng-container *ngIf=\"userForm.controls.name.invalid && userForm.controls.name.touched\" >\n                                     <p *ngIf=\"userForm.controls.name.errors.minlength && !userForm.controls.name.errors.required\" class=\"error-message\">\n                                                    El nombre necesita un mínimo de 5 caracteres\n                                    </p>\n                   </ng-container>\n                    <div [style.margin-top]=\"'1.5em'\" fxLayoutAlign=\"center\">\n                        <mat-form-field>\n                           <mat-label for=\"email\">EMAIL</mat-label>\n                           <input matInput formControlName='email' id=\"email\" name='email' placeholder=\"Email\" type=\"email\" autofocus=\"\" >\n                        </mat-form-field>\n                    </div>\n                 <ng-container *ngIf=\"userForm.controls.email.invalid && userForm.controls.email.touched\" >\n                                          <p *ngIf=\"userForm.controls.email.errors.email\" class=\"error-message\">\n                                                        El valor introducido debe ser un email válido\n                                          </p>\n                    </ng-container>\n                    <div [style.margin-top]=\"'3em'\" fxLayoutAlign =\"center\"> \n                        <mat-form-field>\n                             <input matInput formControlName='password1' id=\"password1\" name='password1'  placeholder=\"Password1\" type=\"password\" >\n                        </mat-form-field>\n                    </div>\n                    <ng-container *ngIf=\"userForm.controls.password1.invalid && userForm.controls.password1.touched\" >\n                                    <p *ngIf=\"userForm.controls.password1.errors.hasNumeric && !userForm.controls.password1.errors.required\" class=\"error-message\">\n                                                    La contraseña debe contener al menos un caracter numérico\n                                    </p>\n                                    <p *ngIf=\"userForm.controls.password1.errors.minLength && !userForm.controls.password1.errors.required && !userForm.controls.password1.errors.hasNumeric\" class=\"error-message\">\n                                                    La contraseña debe de tener un mínimo de 8 caracteres\n                                    </p>\n                    </ng-container>\n                    <div [style.margin-top]=\"'1.5em'\" fxLayoutAlign =\"center\" >\n                          <mat-form-field>\n                              <input matInput formControlName='password2' id=\"password2\" name='password2' placeholder=\"Password2\" type=\"password\" >\n                          </mat-form-field>\n                    </div>\n                     <ng-container *ngIf=\"userForm.controls.password2.invalid && userForm.controls.password2.touched\" >\n                                     <p *ngIf=\"userForm.controls.password2.errors.hasNumeric && !userForm.controls.password2.errors.required\"class=\"error-message\">\n                                                    La contraseña debe contener al menos un caracter numérico\n                                    </p>\n                                    <p *ngIf=\"userForm.controls.password2.errors.minLength && !userForm.controls.password2.errors.required && !userForm.controls.password2.errors.hasNumeric\" class=\"error-message\">\n                                                    La contraseña debe de tener un mínimo de 8 caracteres\n                                    </p>\n                    </ng-container>\n                    <div fxLayoutAlign=\"center\" *ngIf=\"displayPasswordError(userForm)\" [style.margin-top]=\"'3em'\" >\n                                <p class='error-message'>Las contraseñas deben de ser iguales</p>\n                    </div>\n                <div [style.margin-top]=\"'2em'\" fxLayoutAlign=\"center\">\n                     <button mat-raised-button [disabled]=\"userForm.invalid\" type='submit'><strong>REGISTER</strong></button>\n                </div>\n            </form>\n            <div fxLayoutAlign=\"center\" [style.margin-top]=\"'1.5em'\">\n                <a (click)=\"navigateToLogin()\">Login</a>\n            </div>\n          </div>\n      </div>\n</div>","import { Directive, forwardRef, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms';\n\n@Directive({\n  selector: '[appPassword]',\n  providers:[\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => PasswordDirective), multi: true }\n  ]\n})\nexport class PasswordDirective implements Validator {\n\n  @Input() regExps:{error:string,regExp:string}[]=[];\n\n  constructor() { }\n\n  validate(c:AbstractControl){\n   return  this.checkRegExp(c.value);\n  }\n\n  checkRegExp(passwordValue:string){\n    let passError = null;\n    this.regExps.forEach(( { error, regExp })=>{\n      let regularExpression = new RegExp(regExp);\n      if(!regularExpression.test(passwordValue)){\n        passError = {[error]:true}\n      }\n    })\n    return passError;\n  }\n\n}\n","export class Credentials{\n    constructor(public email:string,\n               public password:string){\n    }\n}","import { Injectable } from '@angular/core';\nimport { ForgotSmartComponent } from '../../recovering/forgot/forgot-smart.component';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ResetSmartComponent } from '../../recovering/reset/reset-smart.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthDialogService {\n\n  constructor(private dialog: MatDialog,) { }\n  openRecoverPassDialog(){\n    const dialogForgot = new MatDialogConfig();\n    dialogForgot.disableClose = true;\n    dialogForgot.autoFocus = true;\n    const dialogRef = this.dialog.open(ForgotSmartComponent, dialogForgot);\n    return dialogRef.afterClosed().subscribe((email) => {\n      if (email) {\n        this.openResetPassDialog(email)\n      }\n    })\n  }  \n  openResetPassDialog(email:string){\n    console.log('openReset')\n    const dialogRecover = new MatDialogConfig();\n    dialogRecover.disableClose = true;\n    dialogRecover.autoFocus = true;\n    dialogRecover.data = { email };\n    this.dialog.open(ResetSmartComponent, dialogRecover);\n  }\n}\n","import { FileModel } from './file.model';\nexport class User {\n    constructor(\n        public name:string,\n        public email:string,\n        public password?:string,\n        public status?:boolean,\n        public img?:FileModel,\n        public _id?: string,\n        public projects?:any[],\n        public role?: string,\n        public connected?:boolean,\n        public token?:string\n    ){\n    }\n}\n\nexport class UserOrder{\n    constructor(public user: User,\n                public order:string,\n                ){\n    }\n}\n","import { FormGroup, FormControl } from '@angular/forms';\r\n\r\nexport const areTheyEqual = (field1: string, field2: string)=> {\r\n    return (group: FormGroup) => {\r\n        let pass1 = group.controls[field1].value;\r\n        let pass2 = group.controls[field2].value;\r\n        if (pass1 === pass2) {\r\n            return null\r\n        }\r\n        return { areTheyEqual: true }\r\n    }\r\n}\r\n\r\nexport const checkRegExp = ( regExps:{error:string,regExp:string}[])=>{\r\n    return (control:FormControl)=>{\r\n        let passwordValue = control.value;\r\n        let passError = null;\r\n        regExps.forEach(({ error, regExp }) => {\r\n            let regularExpression = new RegExp(regExp);\r\n            if (!regularExpression.test(passwordValue)) {\r\n                passError = { [error]: true }\r\n            }\r\n        })\r\n        return passError;\r\n    }   \r\n}"],"sourceRoot":"webpack:///"}