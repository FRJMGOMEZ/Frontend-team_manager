{"version":3,"sources":["./src/app/library/components/global-dialogs/global-dialogs.service.ts","./src/app/library/providers/objects-operations.service.ts","./src/app/pages/chat/chat.component.ts","./src/app/pages/chat/chat.component.html","./src/app/pages/pages-routing.module.ts","./src/app/pages/pages.component.ts","./src/app/pages/pages.component.html","./src/app/pages/pages.module.ts","./src/app/shared/components/event-dialog/event-dialog-smart.component.ts","./src/app/shared/components/event-dialog/event-dialog.component.ts","./src/app/shared/components/event-dialog/event-dialog.component.html","./src/app/shared/components/events-dialog/events-dialog.component.ts","./src/app/shared/components/events-dialog/events-dialog.component.html","./src/app/shared/components/header/header-smart.component.ts","./src/app/shared/components/header/header.component.ts","./src/app/shared/components/header/header.component.html","./src/app/shared/components/project-dialog/project-dialog-smart-component.ts","./src/app/shared/components/project-dialog/project-dialog.component.ts","./src/app/shared/components/project-dialog/project-dialog.component.html","./src/app/shared/components/projects/project-smart.component.ts","./src/app/shared/components/projects/projects.component.ts","./src/app/shared/components/projects/projects.component.html","./src/app/shared/models/project.model.ts","./src/app/shared/providers/dialogs.service.ts","./src/app/shared/providers/events.service.ts","./src/app/shared/providers/project.service.ts","./src/app/shared/shared.module.ts"],"names":[],"mappings":"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","file":"pages-pages-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialogConfig, MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ConfirmDialogsComponent } from './confirm-dialogs/confirm-dialogs.component';\nimport { InformDialogsComponent } from './inform-dialogs/inform-dialogs.component';\nimport { GlobalDialogsModule } from './global-dialogs.module';\nimport { Observable } from 'rxjs';\n\n//// Global dialogs service ////\n\n@Injectable({\n  providedIn: GlobalDialogsModule\n})\nexport class GDService {\n  constructor(private dialog: MatDialog) { }\n  openConfirmDialog(title:string='CONFIRM DELETION',message:string='Are you sure?'): Observable<any> {\n    const dialog = new MatDialogConfig();\n    dialog.disableClose = true;\n    dialog.autoFocus = true;\n    dialog.data = {title,message}\n    let dialogRef: MatDialogRef<any> = this.dialog.open(ConfirmDialogsComponent, dialog)\n    return dialogRef.afterClosed()\n  }\n  openInfoDialog(message:string,title:string,item?:string) {\n    const dialog = new MatDialogConfig();\n    dialog.disableClose = true;\n    dialog.autoFocus = true;\n    dialog.data = {message,title,item:item?item:null}\n    let dialogRef: MatDialogRef<any> = this.dialog.open(InformDialogsComponent, dialog)\n    return dialogRef.afterClosed()\n  }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/* Object-operations-service */\nexport class OOService {\n\n  public static copyObject(object: any) {\n    return JSON.parse(JSON.stringify(object));\n  }\n\n  public static areEquals(obj1: any, obj2: any): boolean {\n    if (typeof obj1 !== typeof obj2) {\n      return false;\n    }\n    if ((obj1 === undefined && obj2 !== undefined) ||\n      (obj1 === undefined && obj1 !== undefined) ||\n      (obj1 === null && obj2 !== null) ||\n      (obj2 === null && obj1 !== null)) {\n      return false;\n    }\n    if (typeof obj1 === 'object') {\n      if (Array.isArray(obj1)) {\n        if (!Array.isArray(obj2) || obj1.length !== obj2.length) {\n          return false;\n        }\n        for (let i = 0; i < obj1.length; i++) {\n          if (!this.areEquals(obj1[i], obj2[i])) {\n            return false;\n          }\n        }\n      } else {\n        for (let prop in obj1) {\n          if (obj1.hasOwnProperty(prop)) {\n            if (!obj2.hasOwnProperty(prop)) {\n              return false;\n            }\n            //Endless loop fix for recursive properties\n            if (!this.areEquals(obj1[prop], obj2[prop])) {\n\n              return false;\n            }\n          }\n        }\n        for (let prop in obj2) {\n          if (obj2.hasOwnProperty(prop)) {\n            if (!obj1.hasOwnProperty(prop)) {\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    }\n    return obj1 === obj2;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>chat works!</p>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PagesComponent } from './pages.component';\n\nlet pagesRoutes:Routes = [\n  \n  {\n    path:'',component:PagesComponent,\n    children:[\n      {\n        path: '', loadChildren: () => import('./dashboard/dashboard.module').then(m => m.DashboardModule)\n      },\n   /*    {\n        path: 'projects', loadChildren: () => import('./projects/projects.module').then(m => m.ProjectsModule)\n      }, */\n      {\n        path: 'calendar', loadChildren: () => import('./calendar-scheduler/calendar-scheduler.module').then(m => m.CalendarSchedulerModule)\n      }\n    \n     /*  {\n        path: 'users', loadChildren: () => import('./users/users.module').then(m => m.UsersModule)\n      },\n      {\n        path:'profile', loadChildren:()=> import('./profile/profile.module').then(m=> m.ProfileModule)\n      },\n      \n       */\n    ]\n  }\n]\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(pagesRoutes)\n  ]\n})\nexport class PagesRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pages',\n  templateUrl: './pages.component.html',\n  styleUrls: ['./pages.component.css']\n})\nexport class PagesComponent implements OnInit {\n  constructor() { }\n  ngOnInit() {}\n\n}\n","\n\n<mat-sidenav-container>\n  <mat-sidenav #start [mode]=\"'side'\">\n             <mat-list>\n                <mat-list-item matTooltip=\"navigate to home\">\n                   <a  routerLinkActive=\"router-link-active\"> <mat-icon color=\"primary\">home</mat-icon></a>\n                </mat-list-item>\n               <mat-list-item matTooltip=\"navigate to calendar\">\n                  <a [routerLink]=\"['/calendar']\" routerLinkActive=\"router-link-active\"><mat-icon  color=\"primary\">calendar_today</mat-icon></a>\n               </mat-list-item>\n                 <mat-list-item matTooltip=\"navigate to data visualization\">\n                    <a [routerLink]=\"['/projects']\" routerLinkActive=\"router-link-active\"><mat-icon color=\"primary\"> show_chart</mat-icon></a>\n                 </mat-list-item>\n               <mat-list-item matTooltip=\"navigate to chat\">\n                  <a [routerLink]=\"['/projects']\" routerLinkActive=\"router-link-active\"><mat-icon color=\"primary\">chat</mat-icon></a>\n               </mat-list-item>\n               <mat-list-item matTooltip=\"navigate to task manager\">\n                  <a [routerLink]=\"['/projects']\" routerLinkActive=\"router-link-active\"><mat-icon color=\"primary\">assignment</mat-icon></a>\n               </mat-list-item>\n             </mat-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <app-header-smart (toggleSideMenu)=\"start.toggle()\" >\n      <app-projects-smart></app-projects-smart>\n    </app-header-smart>\n      <div class=\"main\">\n         <router-outlet ></router-outlet>\n      </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n\n<!-- \n\n<p class='fixed-bottom text-center m-0 p-0' style='background:black;color:white'>APP diseñada y desarrollada por FRJMartínez Gómez. Contacta a través de frjmartinezgomez@gmail.com</p>\n -->\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PagesRoutingModule } from './pages-routing.module';\nimport { PagesComponent } from './pages.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nimport { MaterialModule } from '../shared/material/material.module';\nimport { ChatComponent } from './chat/chat.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [\n    PagesComponent,\n    ChatComponent\n  ],\n  imports: [\n    CommonModule,\n    PagesRoutingModule,\n    SharedModule, \n    RouterModule,\n    MaterialModule\n  ]\n})\nexport class PagesModule { }\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EventsService } from '../../providers/events.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { EventModel } from '../../models/event.model';\r\n\r\n@Component({\r\n    selector: 'app-event-dialog-smart',\r\n    template: `\r\n    \r\n    <app-event-dialog [eventSelected]=\"eventSelected\" (close)=\"closeDialog()\" > </app-event-dialog>\r\n    `\r\n\r\n})\r\nexport class EventDialogSmartComponent implements OnInit {\r\n\r\n    eventsSubscription:Subscription;\r\n    eventSelected:EventModel\r\n\r\n    constructor(private dialogRef: MatDialogRef<EventDialogSmartComponent>, @Inject(MAT_DIALOG_DATA) private data, private eventService:EventsService) { }\r\n\r\n    ngOnInit(): void {\r\n       this.eventService.getEventById(this.data.eventId).subscribe((event:EventModel)=>{\r\n         this.eventSelected = event;\r\n       })\r\n    }\r\n    closeDialog(){\r\n        this.dialogRef.close();\r\n    }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { EventModel } from '../../models/event.model';\n\n@Component({\n  selector: 'app-event-dialog',\n  templateUrl: './event-dialog.component.html',\n  styleUrls: ['./event-dialog.component.scss']\n})\nexport class EventDialogComponent implements OnInit {\n\n  @Input() eventSelected: EventModel\n\n  @Output() close = new EventEmitter<void>();\n\n  constructor() { }\n\n  ngOnInit(): void {}\n\n}\n","\n<h2 mat-dialog-title></h2>\n<mat-dialog-content *ngIf=\"eventSelected\">\n \n       <!--  <mat-card-header>\n            <mat-card-title>{{eventSelected.name}}</mat-card-title>\n            <mat-card-subtitle> created by {{eventSelected.user['name']}}</mat-card-subtitle>\n        </mat-card-header> -->\n   \n            <div>\n                <h3 fxLayoutAlign=\"center\">{{eventSelected.name}}</h3>\n                <h5 [style.color]=\"'#3f51b5'\" >created by {{eventSelected.user['name']}}</h5>\n            </div>\n\n            <div class=\"category-div\" >\n                <h5>\n                    Description :\n                </h5>\n                <p>\n                    {{eventSelected.description}}\n                </p>\n            </div>\n            <div fxLayoutAlign=\"space-between\" class=\"category-div\" >\n               <div>\n                   <h5>\n                       Start date:\n                   </h5>\n                   <p>\n                       {{eventSelected.startDate | date : 'dd/MM/yyyy' }} \n                   </p>\n               </div>\n                <div>\n                    <h5>\n                        End Date:\n                    </h5> \n                    <p>\n                        {{eventSelected.endDate | date : 'dd/MM/yyyy'}}\n                    </p>\n                </div>\n            </div>\n            <div class=\"category-div\">\n                <h5>\n                    Recursive:\n                </h5> \n                <p>\n                    {{eventSelected.recursive}}\n                </p>\n            </div>\n            <div class=\"category-div\" >\n                <h5>\n                    Time : \n                </h5>\n                <p>\n                    {{eventSelected.startTime}} - {{eventSelected.endTime}}\n                </p>\n            </div>\n            <div class=\"category-div\" >\n                <h5>\n                    Participants:\n                </h5>\n                <mat-list role=\"list\">\n                    <mat-list-item *ngFor=\"let participant of eventSelected.participants\" role=\"listitem\">{{participant.name}}</mat-list-item>\n                </mat-list>\n            </div>\n</mat-dialog-content>\n\n<mat-dialog-actions fxLayoutAlign=\"center\">\n    <button (click)=\"close.emit()\" mat-raised-button> Close </button>\n</mat-dialog-actions>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-events-dialog',\n  templateUrl: './events-dialog.component.html',\n  styleUrls: ['./events-dialog.component.css']\n})\nexport class EventsDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>events-dialog works!</p>\n","import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { AuthService } from '../../../auth/shared/providers/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-header-smart',\r\n    template: `\r\n    <app-header (logout)=\"logout()\" (toggleSideMenu)=\"toggleSideMenu.emit()\" > </app-header>`\r\n})\r\nexport class HeaderSmartComponent {\r\n\r\n    @Output() toggleSideMenu: EventEmitter<void> = new EventEmitter<void>()\r\n\r\n    constructor(private authService: AuthService) { }\r\n\r\n    logout() {\r\n        this.authService.logout()\r\n    }\r\n\r\n}","import { Component, EventEmitter, Output, Input, ViewChild, SimpleChanges, OnInit, AfterViewInit } from '@angular/core';\nimport { Project } from '../../models/project.model';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent {\n\n  @Output() logout: EventEmitter<void> = new EventEmitter<void>();\n  @Output() toggleSideMenu: EventEmitter<void> = new EventEmitter<void>();\n  constructor() { }\n  doLogout() {\n    this.logout.emit();\n  }\n}","\n<mat-toolbar >\n    <mat-toolbar-row fxShow.gt-xs fxHide.xs >\n    <span class=\"spacer\"></span>   \n       <a ><mat-icon matTooltip=\"navigate to home\" class=\"icon-pages\" color=\"primary\" >home</mat-icon></a>\n       <a><mat-icon [routerLink]=\"['/calendar']\" routerLinkActive=\"router-link-active\"  matTooltip=\"navigate to calendar\" class=\"icon-pages\" color=\"primary\">calendar_today</mat-icon></a>\n       <a><mat-icon matTooltip=\"navigate to data visualization\" class=\"icon-pages\"  color=\"primary\"> show_chart</mat-icon></a>\n       <a><mat-icon matTooltip=\"navigate to chat\" class=\"icon-pages\" color=\"primary\">chat</mat-icon></a>\n       <a><mat-icon matTooltip=\"navigate to task manager\" class=\"icon-pages\" color=\"primary\">assignment</mat-icon></a>\n    <span class=\"spacer\"></span>   \n     <a><mat-icon color=\"warn\">share</mat-icon></a>\n     <a><mat-icon color=\"primary\">settings</mat-icon></a>\n     <a><mat-icon color=\"accent\">logout</mat-icon></a>\n  </mat-toolbar-row>\n   <mat-toolbar-row fxShow.xs fxHide.gt-xs>\n        <a><mat-icon color=\"primary\" (click)=\"toggleSideMenu.emit()\" >menu</mat-icon></a>\n        <span class=\"spacer\"></span> \n        <a><mat-icon color=\"warn\">share</mat-icon></a>\n        <a><mat-icon color=\"primary\">settings</mat-icon></a>\n        <a><mat-icon color=\"accent\">logout</mat-icon></a>\n  </mat-toolbar-row>\n   <mat-toolbar-row fxFlexFill fxLayout=\"row\" fxLayoutAlign=\"start\"[style.margin-top]=\"'2rem'\" >\n      <app-projects-smart></app-projects-smart>\n  </mat-toolbar-row>\n</mat-toolbar>\n","\r\nimport { Component, OnInit, Inject } from '@angular/core';\r\nimport { User } from '../../models/user.model';\r\n\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { UserServices } from '../../providers/user.service';\r\nimport { Project } from '../../models/project.model';\r\nimport { ProjectService } from '../../providers/project.service';\r\nimport { AuthService } from '../../../auth/shared/providers/auth.service';\r\n\r\n@Component({\r\n    selector: 'app-project-dialog-smart',\r\n    template: `\r\n       <app-project-dialog [participantsOptions]=\"participantsOptions\" [userOnline]=\"userOnline\" [project]=\"project\" (hide)=\"hideModal()\" (postProject)=\"postProject($event)\" (putProject)=\"putProject($event)\" > </app-project-dialog>\r\n    `,\r\n\r\n})\r\nexport class ProjectDialogSmartComponent implements OnInit {\r\n    participantsOptions: User[] = [];\r\n    userOnline: User = this.authService.userOnline;\r\n    project:Project\r\n\r\n    constructor(private userService: UserServices,\r\n                  private projectService: ProjectService,\r\n                  private authService: AuthService,\r\n                  private dialogRef: MatDialogRef<ProjectDialogSmartComponent>,\r\n                  @Inject(MAT_DIALOG_DATA) private data) { }\r\n\r\n    ngOnInit() {\r\n        if(this.data?.project){\r\n             this.project = this.data.project;\r\n        }\r\n        this.userService.getUsers().subscribe((users: User[]) => {\r\n            this.participantsOptions = users;\r\n        })\r\n    }\r\n\r\n    postProject(project:Project) {\r\n            this.projectService.postProject(project).subscribe(() => {\r\n                this.hideModal();\r\n            })\r\n    }\r\n\r\n    putProject(project:Project){\r\n           this.projectService.putProject(project).subscribe(()=>{\r\n               this.hideModal();\r\n           })\r\n    }\r\n\r\n    hideModal() {\r\n        this.dialogRef.close()\r\n    }\r\n\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder, FormArray, FormControl } from '@angular/forms';\nimport { timer } from 'rxjs';\nimport { User } from '../../models/user.model';\nimport { Project } from '../../models/project.model';\nimport { OOService } from '../../../library/providers/objects-operations.service';\n\n@Component({\n  selector: 'app-project-dialog',\n  templateUrl: './project-dialog.component.html',\n  styleUrls: ['./project-dialog.component.css']\n})\nexport class ProjectDialogComponent implements OnInit, OnChanges {\n  /* OPCIONES A ELEGIR DE USUARIOS , OPCIONES SELECCIONADAS(O DEL PROYECTO EDITADO) */\n  @Input() participantsOptions: User[] = [];\n  admOptions: User[] = [];\n  participantsSelected: User[] = []\n  admSelected: User[] = []\n\n  /* PROYECTO SELECCIONADO EN CASO DE EDICIÓN */\n  @Input() project: Project\n  projectPristine:Project\n  @Input() userOnline: User;\n  @Output() hide: EventEmitter<void> = new EventEmitter<void>();\n  @Output() postProject: EventEmitter<Project > = new EventEmitter<Project >()\n  @Output() putProject:EventEmitter<Project> = new EventEmitter<Project>()\n\n  projectForm: FormGroup = this.fb.group({\n    name: ['', [Validators.required,Validators.minLength(3)]],\n    status:['',[Validators.required]],\n    participants: this.fb.array([]),\n    administrators: this.fb.array([])\n  })\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit() {\n    /* SI CREAMOS UN NUEVO PROYECTO INCLUIMOS A USER-ONLINE COMO ADM Y PARTICIPANTE, POR DEFECTO */\n    this.participantsSelected.push(this.userOnline);\n    this.admSelected.push(this.userOnline);\n    const controlParticipants = <FormArray>this.projectForm.get('participants');\n    controlParticipants.push(this.fb.control(this.userOnline._id));\n    const controlAdm = <FormArray>this.projectForm.get('administrators');\n    controlAdm.push(this.fb.control(this.userOnline._id))\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.project) {\n      if(this.project){\n        let participantsToInclude = this.participantsOptions.filter((user: User) => { return this.project.participants.includes(user._id) && user._id != this.userOnline._id });\n        this.participantsSelected.push(...participantsToInclude);\n        const controlParticipants = <FormArray>this.projectForm.get('participants');\n        participantsToInclude.forEach((user: User) => {\n          let control = this.fb.control(user._id);\n          controlParticipants.push(control);\n        })\n        let admToInclude = this.admOptions.filter((user: User) => { return this.project.administrators.includes(user._id) && user._id != this.userOnline._id });\n        this.admSelected.push(...admToInclude);\n        const controlAdm = <FormArray>this.projectForm.get('administrators');\n        admToInclude.forEach((user: User) => {\n          let control = this.fb.control(user._id);\n          controlAdm.push(control);\n        })\n        this.projectForm.patchValue({\n          name: this.project.name,\n          status: this.project.status\n        })\n        timer().subscribe(() => {\n          this.projectPristine = OOService.copyObject(this.projectForm.value)\n        })\n\n      }\n    }\n  }\n  participantsChange(participantIds: string[]) {\n    this.participantsSelected = [this.userOnline,...this.participantsOptions.filter((user:User)=>{ return participantIds.includes(user._id)})]\n    const arrayControl = <FormArray>this.projectForm.get('participants');\n    let controls = arrayControl.controls;\n    controls = controls.filter((control: FormControl) => { return participantIds.includes(control.value) || control.value === this.userOnline._id })\n    arrayControl.clear();\n    controls.forEach((control: FormControl) => {\n      arrayControl.push(control)\n    })\n    this.admOptions = this.participantsOptions.filter((user:User)=>{ return participantIds.includes(user._id) })\n    this.projectForm.markAsDirty();\n    this.administratorsChange(this.admSelected.filter((user: User) => { return participantIds.includes(user._id) }).map((user: User) => { return user._id }))\n  }\n\n  administratorsChange(administratorsIds: string[]) {\n    this.admSelected = [this.userOnline, ...this.admOptions.filter((user: User) => { return administratorsIds.includes(user._id) })]\n    const arrayControl = <FormArray>this.projectForm.get('administrators');\n    let controls = arrayControl.controls;\n    controls = controls.filter((control: FormControl) => { return administratorsIds.includes(control.value) || control.value === this.userOnline._id })\n    arrayControl.clear();\n    controls.forEach((control: FormControl) => {\n      arrayControl.push(control)\n    })\n    this.projectForm.markAsDirty();\n  }\n\n  createProject() {\n    let project = new Project(this.projectForm.value.name, this.projectForm.value.participants, this.projectForm.value.administrators, this.projectForm.value.description);\n    this.postProject.emit(project)\n  }\n\n  saveProjectChanges(){\n      this.project = {...this.project,...this.projectForm.value}\n      this.putProject.emit(this.project)\n  }\n\n\n  checkProjectState(){\n    return OOService.areEquals(this.projectForm.value, this.projectPristine)\n  }\n\n  hideModal() {\n    this.hide.emit()\n  }\n}\n","\n<h2 mat-dialog-title></h2>\n<mat-dialog-content>               \n    <div fxFlex=\"100%\" >\n            <form fxLayout=\"column\" [formGroup]=\"projectForm\">\n                <div fxFlex=\"100%\" fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutGap.gt-xs=\"20px\" fxLayoutAlign=\"center\">\n                                <div>\n                                    <mat-form-field >\n                                        <input #nameControl matInput formControlName=\"name\" id=\"name\" name=\"name\" type=\"text\" class=\"form-control\"placeholder=\"Name\">\n                                    </mat-form-field>\n                                    <p *ngIf=\" projectForm.controls.name.errors?.minlength && !projectForm.controls.name.errors?.required\" class=\"error-message\">Min 3 characters</p>\n                                </div>\n                                <div>\n                                    <mat-form-field>\n                                        <mat-label>Status</mat-label>\n                                        <mat-select formControlName=\"status\">\n                                            <mat-option value=\"true\" > active</mat-option>\n                                            <mat-option value=\"false\"> unactive</mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                </div>\n                 <div fxFlex=\"100%\" fxLayout.gt-xs=\"row\" fxLayoutAlign=\"space-around\"  fxLayout.xs=\"column\">\n                     <div fxFlex=\"45%\">\n                        <mat-form-field>\n                            <mat-label>Participants</mat-label>\n                            <mat-select multiple [disabled]=\"participantsOptions.length === 0\" class='form-control mb-2' (selectionChange)=\"participantsChange($event.value)\">\n                                <mat-option *ngFor=\"let opt of participantsOptions\" [value]=\"opt._id\">{{opt.name}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-label>Participants</mat-label>\n                        <mat-list role=\"list\">\n                            <mat-list-item  *ngFor=\"let participant of participantsSelected\" role=\"listitem\"> <small>{{participant.name}} </small></mat-list-item>\n                        </mat-list>\n                    </div>\n                    <div fxFlex='45%'>\n                        <mat-form-field>\n                            <mat-label>Administrators</mat-label>\n                            <mat-select multiple [disabled]=\"admOptions.length === 0\" (selectionChange)=\"administratorsChange($event.value)\">   \n                                <mat-option *ngFor=\"let opt of admOptions\" [value]=\"opt._id\">{{opt.name}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-label>Administrators</mat-label>\n                        <mat-list role=\"list\">\n                            <mat-list-item *ngFor=\"let adm of admSelected\" role=\"listitem\"> <small>{{adm.name}}</small>\n                            </mat-list-item>\n                        </mat-list>\n                      </div>\n                   </div>\n           </form>\n    </div>             \n</mat-dialog-content>\n\n <mat-dialog-actions fxLayoutAlign=\"center\">\n    <button *ngIf=\"!project\" class=\"mat-raised-button\" (click)=\"createProject()\" [disabled]=\"projectForm.invalid\"> <strong>Create project</strong></button>\n    <button *ngIf=\"project\" class=\"mat-raised-button\" (click)=\"saveProjectChanges()\" [disabled]=\"projectForm.invalid || projectForm.pristine || checkProjectState()\"><strong>Save Changes</strong></button>\n    <button class=\"mat-raised-button\" (click)=\"hideModal()\">Close</button>\n</mat-dialog-actions>\n\n","import { Component, OnInit } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { Project } from '../../models/project.model';\r\nimport { ProjectService } from '../../providers/project.service';\r\nimport { LocalStorageService } from '../../../library/providers/local-storage.service';\r\nimport { DialogsService } from '../../providers/dialogs.service';\r\n\r\n@Component({\r\n    selector: 'app-projects-smart',\r\n    template:`\r\n       <app-projects  [projects]=\"projects\" (projectSelectedOut)=\"selectProject($event)\" [projectSelectedIn]=\"projectSelected\" (deleteProject)=\"deleteProject($event)\" (putProject)=\"putProject($event)\" (postProject)=\"postProject()\" ></app-projects>\r\n    `,\r\n})\r\nexport class ProjectsSmartComponent implements OnInit {\r\n\r\n    projects: Project[] = [];\r\n    projectSubs: Subscription\r\n    projectSelected:string;\r\n    constructor( private projectService: ProjectService, private localStorageService: LocalStorageService, private dialogsService: DialogsService) { }\r\n    ngOnInit() {\r\n        this.projectService.getProjects().subscribe((projects) => {\r\n            this.projects = projects;\r\n            this.projectSelected= this.localStorageService.get('state-data', 'project') ;\r\n        })\r\n        this.projectSubs = this.projectService.project$.subscribe((data: { project: Project | string, order: string }) => {\r\n            switch (data.order) {\r\n                case 'put': this.projects = this.projects.map((project: Project) => { return (data.project as Project)._id === project._id ? data.project as Project : project })\r\n                    break;\r\n                case 'post': this.projects = [...this.projects, data.project as Project];\r\n                    break;\r\n                case 'delete':\r\n                    this.projects = this.projects.filter((project: Project) => { return project._id != data.project as string })\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n    selectProject(projectId?: string) {\r\n         console.log('all')\r\n        this.projectService.selectProject(projectId ? projectId : '')\r\n    }\r\n    putProject(project: Project) {\r\n        this.dialogsService.openEditProjectDialog(project._id);\r\n    }\r\n\r\n    postProject() {\r\n        this.dialogsService.openPostProjectDialog()\r\n    }\r\n\r\n    deleteProject(projectId: string) {\r\n        this.projectService.deleteProject(projectId).subscribe();\r\n    }\r\n    ngOnDestroy() {\r\n        this.projectSubs.unsubscribe()\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, SimpleChanges } from '@angular/core';\nimport { Project } from '../../models/project.model';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n  selector: 'app-projects',\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.scss']\n})\nexport class ProjectsComponent  {\n\n  @Input() projects: Project[] = []\n  @Output() logout: EventEmitter<void> = new EventEmitter<void>();\n  @Output() toggleSideMenu: EventEmitter<void> = new EventEmitter<void>();\n  @Output() projectSelectedOut: EventEmitter<string> = new EventEmitter<string>();\n  @Input() projectSelectedIn: string = ''\n  @Output() putProject: EventEmitter<string> = new EventEmitter<string>();\n  @Output() postProject: EventEmitter<void> = new EventEmitter<void>();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  displayedColumns = ['name', 'administrators', 'participants', 'messagesNum', 'tasksNum', 'status', 'actions'];\n  dataSource = new MatTableDataSource<Project>([])\n  @Output() deleteProject: EventEmitter<string> = new EventEmitter<string>();\n  constructor() { }\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.projects) {\n      this.dataSource.data = this.projects;\n      this.dataSource.paginator = this.paginator;\n    }\n  }\n}\n","\n<mat-expansion-panel>\n    <mat-expansion-panel-header [collapsedHeight]=\"'90px'\" [expandedHeight]=\"'90px'\">\n        <mat-form-field fxFlex=\"55\" (click)=\"$event.stopPropagation();\" fxLayoutAlign=\"flex-end\">\n            <mat-label fxLayout=\"center\">Projects</mat-label>\n            <mat-select #select [(ngModel)]=\"projectSelectedIn\" value=\"\"\n                (selectionChange)=\"projectSelectedOut.emit($event.value ||'')\">\n                <mat-option value=\"\"> All</mat-option>\n                <mat-option *ngFor=\"let project of projects\" [value]=\"project._id\">\n                    {{project.name}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <a (click)=\"$event.stopPropagation();postProject.emit()\">\n            <mat-icon>add</mat-icon>\n        </a>\n    </mat-expansion-panel-header>\n    <mat-table [dataSource]=\"dataSource\">\n        <ng-container matColumnDef=\"name\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef fxShow fxHide.lt-xs> Name </mat-header-cell>\n            <mat-cell mat-cell *matCellDef=\"let element\" fxShow fxHide.lt-xs>\n                {{element.name}}\n            </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"administrators\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef fxShow fxHide.lt-sm> Administrators</mat-header-cell>\n            <mat-cell mat-cell *matCellDef=\"let element\" fxShow fxHide.lt-sm> {{element.administrators.length }}\n            </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"participants\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef fxShow fxHide.lt-sm> Participants </mat-header-cell>\n            <mat-cell mat-cell *matCellDef=\"let element\" fxShow fxHide.lt-sm> {{element.participants.length}}\n            </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"messagesNum\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef fxShow fxHide.lt-sm> Number of messages\n            </mat-header-cell>\n            <mat-cell mat-cell *matCellDef=\"let element\" fxShow fxHide.lt-sm> {{element.messages.length}} </mat-cell>\n        </ng-container>\n\n        <ng-container matColumnDef=\"tasksNum\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef fxShow fxHide.lt-sm> Number of tasks </mat-header-cell>\n            <mat-cell mat-cell *matCellDef=\"let element\" fxShow fxHide.lt-sm> {{element.tasks.length}} </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"status\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef> Status</mat-header-cell>\n            <mat-cell mat-cell *matCellDef=\"let element\"> {{element.status === true ? 'active':'unactive'}} </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"actions\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef> </mat-header-cell>\n            <mat-cell mat-cell *matCellDef=\"let element\">\n                <a (click)=\"putProject.emit(element._id)\">\n                    <mat-icon class=\"icon_options\">edit</mat-icon>\n                </a>\n                <a (click)=\"$event.stopPropagation();deleteProject.emit(element._id)\">\n                    <mat-icon>delete</mat-icon>\n                </a>\n            </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n    </mat-table>\n    <mat-paginator [length]=\"dataSource.data.length\" [pageSize]=\"3\" [pageSizeOptions]=\"[3,6,12]\" showFirstLastButtons>\n    </mat-paginator>\n</mat-expansion-panel>\n","import { FileModel } from './file.model';\n\nexport class Project{\n\n    constructor(public name:string,\n                public participants?:string[],\n                public administrators?:string[],\n                public messages?:string[],\n                public tasks?:string[],\n                public status?:boolean,\n                public _id?: string, ){\n    }\n}\n\nexport class ProjectOrder{\n    constructor(public project:Project,\n                public order:string){\n    }\n}","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogConfig, MatDialogRef } from '@angular/material/dialog';\nimport { EventDialogSmartComponent } from '../components/event-dialog/event-dialog-smart.component';\nimport { ProjectDialogSmartComponent } from '../components/project-dialog/project-dialog-smart-component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogsService {\n\n  constructor(private dialog: MatDialog) { }\n\n  openEventDialog(eventId:string){\n    const dialog = new MatDialogConfig();\n    dialog.disableClose = true;\n    dialog.autoFocus = true;\n    dialog.data = { eventId:eventId }\n    let dialogRef: MatDialogRef<any> = this.dialog.open(EventDialogSmartComponent, dialog)\n    return dialogRef.afterClosed()\n  }\n\n  openEventsInfoDialog(date:number){\n    const dialog = new MatDialogConfig();\n    dialog.disableClose = true;\n    dialog.autoFocus = true;\n    dialog.data = { date }\n    let dialogRef: MatDialogRef<any> = this.dialog.open(EventDialogSmartComponent, dialog)\n    return dialogRef.afterClosed()\n  }\n\n  openEditProjectDialog(project:string){\n    const projectDialog = new MatDialogConfig();\n    projectDialog.disableClose = true;\n    projectDialog.autoFocus = true;\n    projectDialog.data = { project };\n    this.dialog.open(ProjectDialogSmartComponent, projectDialog);\n  }\n\n  openPostProjectDialog(){\n    const projectDialog = new MatDialogConfig();\n    projectDialog.disableClose = true;\n    projectDialog.autoFocus = true;\n    this.dialog.open(ProjectDialogSmartComponent, projectDialog);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EventModel } from '../models/event.model';\nimport { HttpClient } from '@angular/common/http';\nimport { URL_SERVICES } from '../../config/config';\nimport { Subject, Observable, empty } from 'rxjs';\nimport { tap, map, catchError, switchMap } from 'rxjs/operators';\nimport { ErrorHandlerService } from './error-handler.service';\nimport { GDService } from '../../library/components/global-dialogs/global-dialogs.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventsService {\n\n  private eventSrc: Subject<{ event: EventModel, order: string }> = new Subject<{event:EventModel,order:string}>();\n  public event$: Observable<{ event: EventModel, order: string }> = this.eventSrc.asObservable();\n\n  constructor(private http:HttpClient, private errorHandlerService:ErrorHandlerService, private gdService:GDService) { }\n\n  postEvent(event:EventModel){\n    let url = `${URL_SERVICES}event`;\n    return this.http.post(url,event).pipe(\n      map((res:any)=>{ return res.event }),\n      tap((event:EventModel)=>{ this.gdService.openInfoDialog('SUCESFULLY CREATED','CREATION',event.name); this.eventSrc.next({event,order:'post'})}),\n      catchError((err)=>{ console.log({err}); this.gdService.openInfoDialog(err.error.err.message,'ERROR');   return this.errorHandlerService.handleError(err) }))\n  }\n\n  putEvent(event:EventModel){\n    const url = `${URL_SERVICES}event`;\n    return this.http.put(url,event).pipe(\n      map((res: any) => { return res.event }),\n      tap((event: EventModel) => { this.gdService.openInfoDialog('SUCESFULLY UPDATED', 'EDITION', event.name); this.eventSrc.next({event,order:'put'}) }),\n      catchError((err) => { this.gdService.openInfoDialog(err.error.err.message, 'ERROR'); return this.errorHandlerService.handleError(err) })\n    )\n  }\n\n  getEventsByTimeRange(selector:string,range:number[],projectId:string='',recursiveFilter?:number){\n    let url = `${URL_SERVICES}events-by-time-range/${selector}?from=${range[0]}&to=${range[1]}&projectId=${projectId}&recursiveFilter=${recursiveFilter}`\n    return this.http.get(url).pipe(\n      map((res: any) => { return res.events }),\n      catchError((err) => { this.gdService.openInfoDialog(err.error.err.message, 'ERROR'); return this.errorHandlerService.handleError(err) }))\n  }\n\n  deleteEvent(eventId:string){\n    let url = `${URL_SERVICES}event/${eventId}`;\n    let backRequest = this.http.delete(url).pipe(\n      map((res: any) => { return res.event }),\n      tap((event: EventModel) => { this.gdService.openInfoDialog('SUCESFULLY DELETED', 'DELETION', event.name); this.eventSrc.next({ event, order: 'delete' }) }),\n      catchError((err) => { this.gdService.openInfoDialog(err.error.err.message, 'ERROR'); return this.errorHandlerService.handleError(err) }));\n\n    return this.gdService.openConfirmDialog()\n      .pipe(\n        switchMap((res: any) => {\n          return res ? backRequest : empty()\n        }))\n  }\n\n  getEventById(id:string){\n    let url = `${URL_SERVICES}event-by-id/${id}`;\n    return this.http.get(url).pipe(\n      map((res:any)=>{ return res.event}),\n      catchError((err) => { this.gdService.openInfoDialog(err.error.err.message, 'ERROR'); return this.errorHandlerService.handleError(err) })\n      ) \n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, catchError, tap, switchMap } from 'rxjs/operators';\nimport { URL_SERVICES } from '../../config/config';\nimport { Project } from '../models/project.model';\nimport { ErrorHandlerService } from './error-handler.service';\nimport { Subject, Observable, empty } from 'rxjs';\nimport { GDService } from '../../library/components/global-dialogs/global-dialogs.service';\nimport { LocalStorageService } from '../../library/providers/local-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n\n  /* Store all the projects */\n\n  projects: Project[] = []\n\n  private projectsSrc: Subject<Project[]> = new Subject<Project[]>();\n\n  public projects$: Observable<Project[]> = this.projectsSrc.asObservable();\n\n  /* To spread single project changes */\n  private projectSrc: Subject<{ project: Project | string, order: string }> = new Subject<{ project: Project | string, order: string }>();\n\n  public project$: Observable<{ project: Project | string, order: string }> = this.projectSrc.asObservable();\n\n  /* Store selecteProjects */\n  selectedProject: Project\n  /* To spread projects selected */\n  private selectedProjectSrc: Subject<Project | string> = new Subject<Project| string>();\n\n  public selectedProject$: Observable<Project | string> = this.selectedProjectSrc.asObservable();\n\n  constructor(private http: HttpClient,private errorHandlerService: ErrorHandlerService,private gdService: GDService, private localStorageService:LocalStorageService) { }\n\n  getProjects() {\n    let url = `${URL_SERVICES}projects`\n    return this.http.get(url).pipe(\n      tap((res: any) => { this.projectsSrc.next(res.projects); this.projects = res.projects })\n      , map((res: any) => {\n        return res.projects;\n      }),\n      catchError((err) => {  this.gdService.openInfoDialog(err.message, err.status, 'ERROR').subscribe();; return this.errorHandlerService.handleError(err) })\n    )\n  }\n  selectProject(projectId?: string):Project|string {\n    if(!projectId){\n        this.selectedProjectSrc.next('');\n        this.localStorageService.remove('state-data','project') \n        return ''\n    }else{\n      let selectedProject = this.projects.filter((eachProject: Project) => { return eachProject._id === projectId })[0]; \n      this.selectedProjectSrc.next(selectedProject);\n      this.localStorageService.set('state-data',selectedProject._id,'project')\n      this.selectedProject = selectedProject;\n      return this.selectedProject;\n    }\n  }\n\n  postProject(project: Project) {\n    let url = `${URL_SERVICES}project`\n    return this.http.post(url, project).pipe(\n      tap((res: any) => { this.projectSrc.next({ project: res.project, order: 'post' }); this.gdService.openInfoDialog('SUCCESFULLY CREATED',null,res.project.name) }),\n      map((res: any) => {\n        return res.project;\n      })\n      , catchError((err) => {  this.gdService.openInfoDialog(err.message, err.status, 'ERROR').subscribe();; return this.errorHandlerService.handleError(err) })\n    )\n  }\n\n  putProject(project: Project): Observable<any> {\n    let url = `${URL_SERVICES}project`\n    return this.http.put(url, project).pipe(\n      tap((res: any) => { this.projectSrc.next({ project: res.project, order: 'put' }); this.gdService.openInfoDialog('SUCCESFULLY UPDATED', null,  res.project.name)  }),\n      map((res: any) => { return res.project }),\n      catchError((err) => { this.gdService.openInfoDialog(err.message, err.status, 'ERROR').subscribe();; return this.errorHandlerService.handleError(err) }))\n  }\n\n  changeProjectStatus(id: string) {\n    let url = `${URL_SERVICES}project/changeStatus/${id}`\n    return this.http.put(url, {}).pipe(\n      tap((res: any) => { this.projectSrc.next({ project: res.project, order: 'put' }); }),\n      catchError((err) => { this.gdService.openInfoDialog(err.message, err.status, 'ERROR').subscribe();; return this.errorHandlerService.handleError(err) })\n    )\n  }\n  deleteProject(id: string): Observable<any> {\n    let url = `${URL_SERVICES}project/${id}`;\n    let backRequest = this.http.delete(url).pipe(\n      tap((res: any) => { this.projectSrc.next({ project: id, order: 'delete' });this.gdService.openInfoDialog('succesfully deleted','DELETION',res.project.name)}),\n      catchError((err) => {console.log(err); this.gdService.openInfoDialog(err.message, err.status, 'ERROR').subscribe();   ; return this.errorHandlerService.handleError(err) }))    \n      return this.gdService.openConfirmDialog()\n      .pipe(\n        switchMap((res: any) => {\n          return res ? backRequest : empty()\n        }))\n  }\n  getParticipants(projectId: string) {\n    let url = `${URL_SERVICES}getParticipants/${projectId}`;\n    return this.http.get(url).pipe(map((res: any) => {\n      return res.participants\n    }),\n      catchError((err) => { this.gdService.openInfoDialog(err.message, err.status, 'ERROR').subscribe();; return this.errorHandlerService.handleError(err) })\n    )\n  }\n\n  getProjectFiles(projectId: string) {\n    let url = `${URL_SERVICES}project-files/${projectId}`;\n    return this.http.get(url).pipe(map((res: any) => { return res.files }),\n      catchError((err) => { this.gdService.openInfoDialog(err.message, err.status, 'ERROR').subscribe();; return this.errorHandlerService.handleError(err) }))\n  }\n\n\n  ////// SOCKET LOGIC UPDATING PROJECT /////\n  /*  emitProject(projectOrder: ProjectOrder) {\n     this.socket.emit('project', projectOrder)\n   } */\n  /*  projectsSocket() {\n     return this.socket.fromEvent('project').pipe(map((projectOrder:ProjectOrder) => {\n       if(projectOrder.order === 'delete'){\n         if(this.projectSelectedId === projectOrder.project._id){\n           this.projectSelectedId = undefined;\n         }\n         this.projects = this.projects.filter((project)=>{return project._id != projectOrder.project._id})\n       }else if(projectOrder.order === 'put'){\n         if(this.projects.map((project)=>{return project._id}).indexOf(projectOrder.project._id)>=0){\n \n           if (this.projects[this.projects.map((project) => { return project._id }).indexOf(projectOrder.project._id)].name != projectOrder.project.name \n           || this.projects[this.projects.map((project) => { return project._id }).indexOf(projectOrder.project._id)].description != projectOrder.project.description){\n            \n             if(projectOrder.project._id === this.projectSelectedId ){\n               this.name = projectOrder.project.name;\n               this.description = projectOrder.project.description;\n             }\n               this.projects.forEach((project, index) => {\n                 if (project._id === projectOrder.project._id) {\n                   this.projects[index].name = projectOrder.project.name;\n                   this.projects[index].description = projectOrder.project.description;\n                 }\n               })\n           }else{\n             if (projectOrder.project._id === this.projectSelectedId) {\n               if (!projectOrder.project.status) {\n                 if(this.administrators.map((user)=>{return user._id}).indexOf(this._userServices.userOnline._id)<0){\n                   this.router.navigate(['/projects']).then(()=>{\n                     this.getProjects().subscribe()\n                   })\n                 }else{\n                   this.projects.forEach((project, index) => {\n                     if (project._id === projectOrder.project._id) {\n                       this.projects[index].status = projectOrder.project.status;\n                     }\n                   })\n                 }\n               } else {\n                 this.projects.forEach((project, index) => {\n                   if (project._id === projectOrder.project._id) {\n                     this.projects[index].status = projectOrder.project.status;\n                   }\n                 })\n               }\n             }\n               if(this.administrators.map((user)=>{return user._id}).indexOf(this._userServices.userOnline._id)<0){\n                 this.projects = this.projects.filter((project)=>{return project._id != projectOrder.project._id})\n               }else{\n                 this.projects.forEach((project, index) => {\n                   if (project._id === projectOrder.project._id) {\n                     this.projects[index].status = projectOrder.project.status;\n                   }\n                 })\n               }\n           }\n         }else{\n          if(projectOrder.project.participants.indexOf(this._userServices.userOnline._id)>=0){\n               this.projects.push(projectOrder.project)\n          }\n         }\n       }\n     }))\n   }\n  */\n  //////// UPDATING LAST CONNECTION //////\n  /*   lastConnection() {\n      let url = `${URL_SERVICES}lastConnection/${this.projectSelectedId}`\n      return this.http.put(url, {}, { headers: this._userServices.headers }).pipe(map((res: any) => {\n        this._userServices.saveInStorage(res.user._id, res.user, this._userServices.token)\n      }))\n    } */\n\n  /////// USERS IN/OUT SOCKET LOGIC ////////////////\n  /* userIn() {\n    let payload = { user: this._userServices.userOnline._id, room: this.projectSelectedId }\n    this.socket.emit('userIn', payload, (usersOnline) => {\n      this.participants.forEach((user, index) => {\n        if (usersOnline.indexOf(user._id) >= 0) {\n          this.participants[index].connected = true;\n        } else {\n          this.participants[index].connected = undefined;\n        }\n      })\n    })\n  } */\n\n  /*  userOut() {\n     let payload = { user: this._userServices.userOnline._id, room: this.projectSelectedId }\n     this.socket.emit('userOut', payload)\n   } */\n\n  /* usersConnected(){\n    return this.socket.fromEvent('usersOnline').pipe(map((usersOnline:string[])=>{\n      this.participants.forEach((user,index)=>{\n        if(usersOnline.indexOf(user._id)>=0){\n          this.participants[index].connected = true;\n        }else{\n          this.participants[index].connected = undefined;\n        }\n      })\n    }))\n  } */\n\n  /*  addOrRemoveParticipant(userId: string) {\n     let url = `${URL_SERVICES}pullOrPushOutParticipant/${this.projectSelectedId}`;\n     let body = { participant: userId };\n     return this.http.put(url, body, { headers: this._userServices.headers }).pipe(map((res: any) => {\n       let participantsIds = this.participants.map((user) => { return user._id })\n       if (participantsIds.indexOf(res.participant._id) < 0) {\n         this.participants.push(res.participant)\n         this._userServices.users = this._userServices.users.filter((user) => { return user._id != userId })\n         let userOrder = new UserOrder(res.participant, 'pushParticipant')\n         this.emitUsers(userOrder, this.projectSelectedId)\n       } else {\n         this.participants = this.participants.filter((participant) => { return participant._id != res.participant._id })\n         this._userServices.users.push(res.participant)\n         let userOrder = new UserOrder(res.participant, 'removeParticipant')\n         this.emitUsers(userOrder, this.projectSelectedId)\n       }\n     }))\n   } */\n\n  /* addOrRemoveAdmin(userId: string) {\n    let url = `${URL_SERVICES}pullOrPushAdmin/${this.projectSelectedId}`;\n    let body = { participant: userId };\n    return this.http.put(url, body, { headers: this._userServices.headers }).pipe(map((res: any) => {\n      let adminsIds = this.administrators.map((user) => { return user._id })\n      if (adminsIds.indexOf(res.administrator._id) < 0) {\n        this.administrators.push(res.administrator)\n        this._userServices.users = this._userServices.users.filter((user) => { return user._id != userId })\n        let userOrder = new UserOrder(res.administrator, 'pushAdmin')\n        this.emitUsers(userOrder, this.projectSelectedId)\n      } else {\n        this.administrators = this.administrators.filter((administrators) => { return administrators._id != res.administrator._id })\n        this._userServices.users.push(res.administrator)\n        let userOrder = new UserOrder(res.administrator, 'removeAdmin')\n        this.emitUsers(userOrder, this.projectSelectedId)\n      }\n    }))\n  } */\n\n  /*  emitUsers(userOrder: UserOrder, projectId) {\n     let payload = { userOrder, projectId, room: this.projectSelectedId }\n     this.socket.emit('projectUser', payload)\n   } */\n\n  /* usersSocket(){\n    return this.socket.fromEvent('projectUser').pipe(map((payload:any)=>{\n      if(payload.userOrder.order === 'pushParticipant'){\n        if (this.projects.map((project) => { return project._id }).indexOf(payload.projectId) >= 0) {\n          this.projects[this.projects.map((project) => { return project._id }).indexOf(payload.projectId)].participants.push(payload.userOrder.user._id)\n          if (this.projectSelectedId == payload.projectId) {\n            this.participants.push(payload.userOrder.user)\n          }\n        } else {\n          if (this._userServices.userOnline._id === payload.userOrder.user._id) {\n            if(this._ar.snapshot['_routerState'].url === '/projects'){\n              this.router.navigate(['/projects']).then(async () => {\n                await this.getProjects().subscribe()\n              })\n            }\n            let date = new Date()\n            date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes() - date.getTimezoneOffset())\n            let project = { _id: payload.projectId, lastConnection: date }\n            this._userServices.userOnline.projects.push(project)\n            this._userServices.saveInStorage(this._userServices.userOnline._id, this._userServices.userOnline, this._userServices.token)\n          }\n        }\n      }else if (payload.userOrder.order === 'removeParticipant'){\n        if (this.projects.map((project) => { return project._id }).indexOf(payload.projectId) >= 0) {\n          if(this._userServices.userOnline._id === payload.userOrder.user._id){\n            this.projects = this.projects.filter((project) => { return project._id != payload.projectId })\n            this._userServices.userOnline.projects = this._userServices.userOnline.projects.filter((project) => { return project._id != payload.projectId })\n            this._userServices.saveInStorage(this._userServices.userOnline._id, this._userServices.userOnline, this._userServices.token)\n          }else{\n            this.projects[this.projects.map((project) => { return project._id }).indexOf(payload.projectId)].participants =\n              this.projects[this.projects.map((project) => { return project._id }).indexOf(payload.projectId)].participants.filter((user) => { user != payload.userOrder.user._id })\n          }\n          if(this.projectSelectedId === payload.projectId){\n            if(payload.userOrder.user._id === this._userServices.userOnline._id){\n              this.router.navigate(['/projects']).then(async()=>{\n               await this.getProjects().subscribe()\n               this.projectSelectedId = undefined;\n               let user = this._userServices.userOnline\n               user.projects = user.projects.filter((project)=>{return project._id != payload.projectId})\n               this._userServices.saveInStorage(user._id, user, this._userServices.token) \n              })\n            }else{\n              this.participants = this.participants.filter((user)=>{return user._id != payload.userOrder.user._id})\n            }\n          }\n        }else{\n          let projects = JSON.parse(localStorage.getItem('user')).projects;\n          if(projects.map((project)=>{return project._id}).indexOf(payload.projectId)>=0){\n            this._userServices.userOnline.projects = this._userServices.userOnline.projects.filter((project)=>{return project._id != payload.projectId})\n            this._userServices.saveInStorage(this._userServices.userOnline._id,this._userServices.userOnline,this._userServices.token)\n          }\n        }\n      }else if(payload.userOrder.order === 'pushAdmin'){\n        if (this.projects.map((project) => { return project._id }).indexOf(payload.projectId) >= 0) {\n          this.projects[this.projects.map((project) => { return project._id }).indexOf(payload.projectId)].administrators.push(payload.userOrder.user._id)\n          if(this.projectSelectedId === payload.projectId){\n            this.administrators.push(payload.userOrder.user)\n          }  \n        }\n      }else if (payload.userOrder.order === 'removeAdmin'){\n        if (this.projects.map((project) => { return project._id }).indexOf(payload.projectId) >= 0){\n          this.projects[this.projects.map((project) => { return project._id }).indexOf(payload.projectId)].administrators =\n            this.projects[this.projects.map((project) => { return project._id }).indexOf(payload.projectId)].administrators.filter((user) => { user != payload.userOrder.user._id })\n            if(this.projectSelectedId === payload.projectId){\n              if (payload.userOrder.user._id === this._userServices.userOnline._id) {\n                this.router.navigate(['/projects',payload.projectId]).then(()=>{\n                  this.getProjectById(payload.projectId).subscribe()\n                })\n              } \n            this.administrators = this.administrators.filter((user) => { return user._id != payload.userOrder.user._id })  \n          }\n        }\n      }\n    }))\n  } */\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RouterModule } from '@angular/router';\n\nimport { PipesModule } from './pipes/pipes.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from './material/material.module';\nimport { HeaderSmartComponent } from './components/header/header-smart.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { ProjectDialogComponent } from './components/project-dialog/project-dialog.component';\nimport { ProjectDialogSmartComponent } from './components/project-dialog/project-dialog-smart-component';\nimport { EventDialogComponent } from './components/event-dialog/event-dialog.component';\nimport { EventDialogSmartComponent } from './components/event-dialog/event-dialog-smart.component';\nimport { EventsDialogComponent } from './components/events-dialog/events-dialog.component';\nimport { ProjectsComponent } from './components/projects/projects.component';\nimport { ProjectsSmartComponent } from './components/projects/project-smart.component';\n\n@NgModule({\n  declarations: [\n    HeaderSmartComponent,\n    HeaderComponent,\n    ProjectDialogComponent,\n    ProjectDialogSmartComponent,\n    EventDialogComponent,\n    EventDialogSmartComponent,\n    EventsDialogComponent,\n    ProjectsComponent,\n    ProjectsSmartComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    PipesModule,\n    MaterialModule,\n    FlexLayoutModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ],\n  exports:[\n    HeaderSmartComponent,\n    ProjectsSmartComponent,\n    ProjectDialogSmartComponent\n  ]\n})\nexport class SharedModule { }\n"],"sourceRoot":"webpack:///"}