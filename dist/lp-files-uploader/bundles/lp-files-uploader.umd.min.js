!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("rxjs/operators"),require("@angular/common")):"function"==typeof define&&define.amd?define("lp-files-uploader",["exports","@angular/core","@angular/forms","rxjs/operators","@angular/common"],t):t((e=e||self)["lp-files-uploader"]={},e.ng.core,e.ng.forms,e.rxjs.operators,e.ng.common)}(this,(function(e,t,n,i,r){"use strict";var o=function(){function e(){this.config={},this.propagateChange=function(e){}}return e.prototype.validate=function(){return this.errors},e.prototype.ngAfterViewInit=function(){var e=this;if(!this.trigger)throw new Error("Component needs a trigger");this.trigger.nativeElement.addEventListener("click",(function(){e.fileInput.nativeElement.click()})),this.fileInputController.valueChanges.pipe(i.skip(1)).subscribe((function(){var t=e.fileInputController.control.errors;t?(e.errors=t,e.propagateChange(null)):(e.errors=null,e.propagateChange(e.fileInput.nativeElement.files)),e.fileInput.nativeElement.files=null,e.fileInput.nativeElement.value=null}))},e.prototype.writeValue=function(e){},e.prototype.registerOnChange=function(e){this.propagateChange=e},e.prototype.registerOnTouched=function(){},e}();o.decorators=[{type:t.Component,args:[{selector:"lp-files-uploader",template:'\n\n<form #form="ngForm">\n    <input \n    hidden\n    style="display:none" \n    #fileInput  \n    #fileInputCtrl="ngModel"\n    ngModel\n    name="files-input"\n    type="file"\n    [multiple]="config.multiple"\n    lpFilesUploader\n    [allowedMimeTypes]="config.allowedMimeTypes "\n    [notAllowedMimeTypes]="config.notAllowedMimeTypes"\n    [maxSizeKb]="config.maxSizeKb" \n    [maxNameLength]="config.maxNameLength"\n    >\n</form>\n\n\n',providers:[{provide:n.NG_VALUE_ACCESSOR,useExisting:t.forwardRef((function(){return o})),multi:!0},{provide:n.NG_VALIDATORS,useExisting:t.forwardRef((function(){return o})),multi:!0}]}]}],o.propDecorators={trigger:[{type:t.Input}],fileInput:[{type:t.ViewChild,args:["fileInput",{static:!0}]}],fileInputController:[{type:t.ViewChild,args:["fileInputCtrl",{static:!0}]}],config:[{type:t.Input}]};var l=function(){function e(e){this.el=e}return e.prototype.validate=function(){var e=this.el.nativeElement.files;return this.validateTypes(e)?this.validateTypes(e):this.validateSize(e)?this.validateSize(e):this.validateNameLength(e)?this.validateNameLength(e):null},e.prototype.validateTypes=function(e){var t=this,n=null;return Array.from(e).forEach((function(e){t.allowedMimeTypes&&t.allowedMimeTypes.indexOf(e.type)<0&&(n={invalidMimeType:!0})})),this.notAllowedMimeTypes&&Array.from(e).forEach((function(e){t.notAllowedMimeTypes.indexOf(e.type)>=0&&(n={invalidMimeType:!0})})),n},e.prototype.validateSize=function(e){var t=this,n=null;return this.maxSizeKb&&Array.from(e).forEach((function(e){e.size/1024>t.maxSizeKb&&(n={invalidFileSize:!0})})),n},e.prototype.validateNameLength=function(e){var t=this,n=null;return this.maxNameLength&&Array.from(e).forEach((function(e){e.name.length>t.maxNameLength&&(n={invalidNameLength:!0})})),n},e}();l.decorators=[{type:t.Directive,args:[{selector:"[lpFilesUploader]",providers:[{provide:n.NG_VALIDATORS,useExisting:t.forwardRef((function(){return l})),multi:!0}]}]}],l.ctorParameters=function(){return[{type:t.ElementRef}]},l.propDecorators={allowedMimeTypes:[{type:t.Input}],notAllowedMimeTypes:[{type:t.Input}],maxSizeKb:[{type:t.Input}],maxNameLength:[{type:t.Input}]};var a=function(){};a.decorators=[{type:t.NgModule,args:[{declarations:[l,o],imports:[r.CommonModule,n.FormsModule,n.ReactiveFormsModule],exports:[l,o]}]}],e.LpFilesUploaderComponent=o,e.LpFilesUploaderDirective=l,e.LpFilesUploaderModule=a,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=lp-files-uploader.umd.min.js.map