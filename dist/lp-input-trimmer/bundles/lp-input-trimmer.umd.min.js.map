{"version":3,"sources":["../../../projects/lp-input-trimmer/src/lib/lp-input-trimmer.directive.ts","../../../projects/lp-input-trimmer/src/lib/lp-input-trimmer.module.ts"],"names":["LpInputTrimmerDirective","el","renderer","this","propagateChange","_","prototype","onChange","value","trim","writeValue","val","setProperty","nativeElement","registerOnChange","fn","registerOnTouched","i0","ɵɵdirectiveInject","ElementRef","Renderer2","selectors","hostBindings","rf","ctx","$event","target","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","LpInputTrimmerModule","imports","declarations","exports"],"mappings":"kWAYE,SAAAA,EAAoBC,EAAwBC,GAAxBC,KAAAF,GAAAA,EAAwBE,KAAAD,SAAAA,EAIpCC,KAAAC,gBAAkB,SAACC,YAHqBL,EAAAM,UAAAC,SAAA,SAASC,GACvDL,KAAKC,gBAAgBI,EAAMC,SAGtBT,EAAAM,UAAAI,WAAA,SAAWC,GAChB,IAAMH,EAAe,MAAPG,EAAc,GAAKA,EACjCR,KAAKD,SAASU,YAAYT,KAAKF,GAAGY,cAAe,QAASL,IAErDR,EAAAM,UAAAQ,iBAAA,SAAiBC,GACtBZ,KAAKC,gBAAkBW,GAElBf,EAAAM,UAAAU,kBAAA,mDAbIhB,GAAuBiB,EAAAC,kBAAAD,EAAAE,YAAAF,EAAAC,kBAAAD,EAAAG,8CAAvBpB,EAAuBqB,UAAA,CAAA,CAAA,GAAA,iBAAA,KAAAC,aAAA,SAAAC,EAAAC,iDAAvBA,EAAAjB,SAAAkB,EAAAC,OAAAlB,0CANA,CAAC,CACVmB,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAA9B,KAC9B+B,OAAO,cCCX,6CAAaC,iEAAAA,IAAoBC,QAAA,CAJtB,uEAIED,EAAoB,CAAAE,aAAA,CALhBlC,GAAuBmC,QAAA,CAG5BnC","sourcesContent":["import { Directive, forwardRef, HostListener, ElementRef, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Directive({\n  selector: '[lpInputTrimmer]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => LpInputTrimmerDirective),\n    multi: true\n  }]\n})\nexport class LpInputTrimmerDirective implements ControlValueAccessor {\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\n  @HostListener('input', ['$event.target.value']) onChange(value: string) {\n    this.propagateChange(value.trim())\n  }\n  private propagateChange = (_: any) => { };\n  public writeValue(val: any) {\n    const value = val == null ? '' : val;\n    this.renderer.setProperty(this.el.nativeElement, 'value', value);\n  }\n  public registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n  public registerOnTouched() { }\n\n}\n","import { NgModule } from '@angular/core';\nimport { LpInputTrimmerDirective } from './lp-input-trimmer.directive';\n\n@NgModule({\n  declarations: [LpInputTrimmerDirective],\n  imports: [\n  ],\n  exports: [LpInputTrimmerDirective]\n})\nexport class LpInputTrimmerModule { }\n"]}